#!/usr/bin/env python3
"""
Bot de Telegram para el sistema de seguimiento de artistas
Contiene todos los handlers de comandos y callbacks espec√≠ficos de Telegram
"""

import os
import logging
import asyncio
from datetime import datetime
from typing import Optional, List, Dict, Tuple
import traceback

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
    ConversationHandler
)


# Importar m√≥dulos propios
# APIS
from apis.muspy_service import MuspyService
from apis.country_state_city import CountryCityService
# M√ìDULOS
from database import ArtistTrackerDatabase
from user_services import UserServices, initialize_concert_services, initialize_country_service, initialize_lastfm_service, validate_services, get_services
from concert_search import search_concerts_for_artist, format_concerts_message, format_single_artist_concerts_complete, split_long_message
# cal
from handlers.calendar_handlers import CalendarHandlers
# muspy
from handlers.muspy_handlers import MuspyHandlers, MUSPY_EMAIL, MUSPY_PASSWORD, MUSPY_USERID
# telegram handlers
from handlers.handlers_helpers import (
handle_notification_callback, handle_country_callback, handle_service_callback,
handle_lastfm_period_selection, handle_lastfm_do_sync, handle_lastfm_change_limit, handle_lastfm_change_user,
handle_spotify_authentication, handle_spotify_real_artists, handle_spotify_show_artists,
handle_spotify_add_artists, handle_spotify_change_limit, handle_spotify_change_user,
show_artists_page, show_artists_without_pagination, show_lastfm_artists_page, show_spotify_artists_page,
extract_auth_code_from_input, escape_markdown_v2, handle_spotify_playlists, show_spotify_playlists_page, handle_spotify_playlist_view,
show_spotify_playlist_artists_page, handle_spotify_playlist_follow_all
)

# Configuraci√≥n de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Variables globales
db = None
user_services = None
application = None
muspy_service = None
muspy_handlers = None
calendar_handlers = None

async def spotify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /spotify - gesti√≥n de sincronizaci√≥n con Spotify - VERSI√ìN CORREGIDA"""
    services = get_services()

    # DIAGN√ìSTICO DETALLADO
    spotify_service = services.get('spotify_service')

    if not spotify_service:
        # Verificar por qu√© no est√° disponible
        client_id = os.getenv('SPOTIFY_CLIENT_ID')
        client_secret = os.getenv('SPOTIFY_CLIENT_SECRET')

        error_details = []
        if not client_id:
            error_details.append("‚ùå SPOTIFY_CLIENT_ID no configurado")
        if not client_secret:
            error_details.append("‚ùå SPOTIFY_CLIENT_SECRET no configurado")

        if error_details:
            await update.message.reply_text(
                "‚ùå *Servicio de Spotify no disponible*\n\n"
                "*Problemas encontrados:*\n" + "\n".join(error_details) + "\n\n"
                "*Para solucionarlo:*\n"
                "1. Crea una aplicaci√≥n en https://developer.spotify.com\n"
                "2. Configura las variables de entorno:\n"
                "   `SPOTIFY_CLIENT_ID=tu_client_id`\n"
                "   `SPOTIFY_CLIENT_SECRET=tu_client_secret`\n"
                "3. Reinicia el bot\n\n"
                "üí° *Estado actual:*\n"
                f"Client ID: {'‚úÖ Configurado' if client_id else '‚ùå Falta'}\n"
                f"Client Secret: {'‚úÖ Configurado' if client_secret else '‚ùå Falta'}",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "‚ùå *Servicio de Spotify no disponible*\n\n"
                "Las credenciales est√°n configuradas pero el servicio no se inicializ√≥.\n"
                "Posibles causas:\n"
                "‚Ä¢ El archivo `apis/spotify.py` no existe\n"
                "‚Ä¢ Error en la inicializaci√≥n del servicio\n"
                "‚Ä¢ Problemas de importaci√≥n\n\n"
                "Revisa los logs del bot para m√°s detalles.",
                parse_mode='Markdown'
            )
        return

    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    # Verificar si ya tiene usuario de Spotify configurado
    spotify_user = db.get_user_spotify(user['id'])

    if not spotify_user:
        # No tiene usuario configurado, pedirlo
        context.user_data['waiting_for_spotify_user'] = user['id']
        await show_spotify_setup(update, user, context)
    else:
        # Ya tiene usuario, mostrar men√∫ principal
        await show_spotify_menu(update, user, spotify_user)




async def show_spotify_setup(update, user: Dict, context = None):
    """Muestra el setup inicial de Spotify con autenticaci√≥n OAuth"""
    message = (
        "üéµ *Configuraci√≥n de Spotify*\n\n"
        "Para acceder a tus artistas seguidos y poder seguir nuevos artistas, "
        "necesitas autenticarte con tu cuenta de Spotify.\n\n"
        "Selecciona c√≥mo quieres proceder:"
    )

    keyboard = [
        [InlineKeyboardButton("üîê Autenticaci√≥n completa", callback_data=f"spotify_auth_{user['id']}")],
        [InlineKeyboardButton("üë§ Solo nombre de usuario", callback_data=f"spotify_username_{user['id']}")],
        [InlineKeyboardButton("‚ùå Cancelar", callback_data=f"spotify_cancel_{user['id']}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        message,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )


async def show_spotify_menu(update, user: Dict, spotify_user: Dict):
    """Muestra el men√∫ principal de Spotify con bot√≥n de Playlists - VERSI√ìN ACTUALIZADA"""
    services = get_services()

    username = spotify_user['spotify_username']
    display_name = spotify_user.get('spotify_display_name', username)
    followers = spotify_user.get('spotify_followers', 0)
    playlists = spotify_user.get('spotify_playlists', 0)
    artists_limit = spotify_user.get('artists_limit', 20)

    # Verificar estado del servicio
    user_services_config = user_services.get_user_services(user['id'])
    service_status = "‚úÖ Activado" if user_services_config.get('spotify', True) else "‚ùå Desactivado"

    # Verificar autenticaci√≥n OAuth
    is_authenticated = services['spotify_service'].is_user_authenticated(user['id']) if services.get('spotify_service') else False
    auth_status = "üîê Autenticado" if is_authenticated else "üë§ Solo usuario"

    message = (
        f"üéµ *Spotify - {display_name}*\n\n"
        f"üë§ Usuario: @{username}\n"
        f"üë• Seguidores: {followers:,}\n"
        f"üéµ Playlists: {playlists}\n"
        f"üî¢ L√≠mite de artistas: {artists_limit}\n"
        f"‚öôÔ∏è Estado del servicio: {service_status}\n"
        f"üîê Autenticaci√≥n: {auth_status}\n\n"
        f"Selecciona una opci√≥n:"
    )

    # Botones seg√∫n el estado de autenticaci√≥n
    if is_authenticated:
        keyboard = [
            [
                InlineKeyboardButton("üéµ Artistas seguidos", callback_data=f"spotify_real_artists_{user['id']}"),
                InlineKeyboardButton("üìã Playlists", callback_data=f"spotify_playlists_{user['id']}")
            ],
            [
                InlineKeyboardButton("‚ûï A√±adir artistas", callback_data=f"spotify_add_{user['id']}"),
                InlineKeyboardButton("üî¢ Cambiar cantidad", callback_data=f"spotify_limit_{user['id']}")
            ],
            [
                InlineKeyboardButton("üîó Seguir en Spotify", callback_data=f"spotify_follow_{user['id']}"),
                InlineKeyboardButton("üë§ Cambiar usuario", callback_data=f"spotify_changeuser_{user['id']}")
            ],
            [
                InlineKeyboardButton("üö´ Revocar acceso", callback_data=f"spotify_revoke_{user['id']}")
            ]
        ]
    else:
        keyboard = [
            [
                InlineKeyboardButton("üîê Autenticar cuenta", callback_data=f"spotify_auth_{user['id']}"),
                InlineKeyboardButton("üéµ Mostrar artistas", callback_data=f"spotify_artists_{user['id']}")
            ],
            [
                InlineKeyboardButton("üî¢ Cambiar cantidad", callback_data=f"spotify_limit_{user['id']}"),
                InlineKeyboardButton("üë§ Cambiar usuario", callback_data=f"spotify_changeuser_{user['id']}")
            ]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    # Verificar si es callback o mensaje normal
    try:
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"Error mostrando men√∫ Spotify: {e}")



# ===========================
# CALLBACK HANDLERS
# ===========================

async def artist_selection_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja la selecci√≥n de artistas desde los botones inline"""
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id

    if query.data == "cancel_artist_selection":
        db.clear_pending_selection(chat_id)
        await query.edit_message_text("‚ùå Selecci√≥n de artista cancelada.")
        return

    # Extraer √≠ndice del artista seleccionado
    if not query.data.startswith("select_artist_"):
        return

    try:
        artist_index = int(query.data.split("_")[-1])
    except ValueError:
        await query.edit_message_text("‚ùå Error en la selecci√≥n. Int√©ntalo de nuevo.")
        return

    # Obtener selecci√≥n pendiente
    pending_data = db.get_pending_selection(chat_id)
    if not pending_data:
        await query.edit_message_text(
            "‚ùå No hay selecci√≥n pendiente. Usa `/addartist` para buscar un artista."
        )
        return

    candidates, original_query = pending_data

    if artist_index >= len(candidates):
        await query.edit_message_text("‚ùå Selecci√≥n inv√°lida. Int√©ntalo de nuevo.")
        return

    selected_candidate = candidates[artist_index]

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await query.edit_message_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    # Crear el artista y a√±adirlo a seguimiento
    await query.edit_message_text(f"‚è≥ A√±adiendo '{selected_candidate['name']}'...")

    artist_id = db.create_artist_from_candidate(selected_candidate)

    if not artist_id:
        await query.edit_message_text(
            f"‚ùå Error al a√±adir el artista '{selected_candidate['name']}'. Int√©ntalo de nuevo."
        )
        return

    was_new = db.add_followed_artist(user['id'], artist_id)

    # Limpiar selecci√≥n pendiente
    db.clear_pending_selection(chat_id)

    if was_new:
        await query.edit_message_text(
            f"‚úÖ ¬°Ahora sigues a '{selected_candidate['name']}'! üéµ\n"
            f"Usa `/list` para ver todos tus artistas seguidos."
        )
    else:
        await query.edit_message_text(
            f"‚ÑπÔ∏è Ya segu√≠as a '{selected_candidate['name']}'."
        )


async def country_selection_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja la selecci√≥n de pa√≠ses desde los botones inline"""
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id

    if query.data == "cancel_country_selection":
        db.clear_pending_selection(chat_id)
        await query.edit_message_text("‚ùå Selecci√≥n de pa√≠s cancelada.")
        return

    # Extraer √≠ndice del pa√≠s seleccionado
    if not query.data.startswith("select_country_"):
        return

    try:
        country_index = int(query.data.split("_")[-1])
    except ValueError:
        await query.edit_message_text("‚ùå Error en la selecci√≥n. Int√©ntalo de nuevo.")
        return

    # Obtener selecci√≥n pendiente
    pending_data = db.get_pending_selection(chat_id)
    if not pending_data:
        await query.edit_message_text(
            "‚ùå No hay selecci√≥n pendiente. Usa `/addcountry` para buscar un pa√≠s."
        )
        return

    countries, original_query = pending_data

    if country_index >= len(countries):
        await query.edit_message_text("‚ùå Selecci√≥n inv√°lida. Int√©ntalo de nuevo.")
        return

    selected_country = countries[country_index]

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await query.edit_message_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    # A√±adir pa√≠s
    await query.edit_message_text(
        f"‚è≥ A√±adiendo pa√≠s {selected_country['name']} ({selected_country['code']})...\n"
        f"Esto puede tardar un momento mientras obtenemos las ciudades..."
    )

    try:
        success = country_state_city.add_user_country(user['id'], selected_country['code'])

        # Limpiar selecci√≥n pendiente
        db.clear_pending_selection(chat_id)

        if success:
            # Obtener estad√≠sticas
            cities = country_state_city.get_country_cities(selected_country['code'])
            user_countries = country_state_city.get_user_countries(user['id'])

            await query.edit_message_text(
                f"‚úÖ Pa√≠s a√±adido: {selected_country['name']} ({selected_country['code']})\n"
                f"üèôÔ∏è {len(cities)} ciudades cargadas\n"
                f"üåç Total pa√≠ses configurados: {len(user_countries)}\n\n"
                f"Usa `/mycountries` para ver tu configuraci√≥n actual."
            )
        else:
            await query.edit_message_text(
                f"‚ùå Error a√±adiendo el pa√≠s {selected_country['name']}.\n"
                f"Es posible que ya lo tengas configurado."
            )
    except Exception as e:
        logger.error(f"Error a√±adiendo pa√≠s: {e}")
        await query.edit_message_text(
            "‚ùå Error al a√±adir el pa√≠s. Int√©ntalo de nuevo m√°s tarde."
        )


async def expand_concerts_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja la expansi√≥n de conciertos desde los botones inline - VERSI√ìN CORREGIDA"""
    query = update.callback_query
    await query.answer()

    try:
        # Parsear el callback data
        parts = query.data.split("_")

        if query.data.startswith("expand_all_"):
            # Expandir todos los conciertos
            user_id = int(parts[2])

            # Obtener datos del cach√©
            cache_data = get_user_search_cache(user_id)
            if not cache_data:
                await query.edit_message_text(
                    "‚ùå La b√∫squeda ha expirado. Usa `/search` para buscar de nuevo."
                )
                return

            search_type, concerts = cache_data

            # Mostrar todos los conciertos sin l√≠mite usando el formato original
            message = format_expanded_concerts_message_original(concerts, "üéµ Todos los conciertos encontrados")

            # Dividir en chunks si es muy largo
            if len(message) > 4000:
                chunks = split_long_message(message)

                # Editar el mensaje original con el primer chunk
                await query.edit_message_text(
                    chunks[0],
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )

                # Enviar chunks adicionales
                for chunk in chunks[1:]:
                    await query.message.reply_text(
                        chunk,
                        parse_mode='Markdown',
                        disable_web_page_preview=True
                    )
            else:
                await query.edit_message_text(
                    message,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )

        elif query.data.startswith("expand_artist_"):
            # Expandir conciertos de un artista espec√≠fico
            user_id = int(parts[-1])  # √öltimo elemento es el user_id
            artist_name = "_".join(parts[2:-1])  # Todo entre "expand_artist" y user_id

            # Obtener datos del cach√©
            cache_data = get_user_search_cache(user_id)
            if not cache_data:
                await query.edit_message_text(
                    "‚ùå La b√∫squeda ha expirado. Usa `/search` para buscar de nuevo."
                )
                return

            search_type, all_concerts = cache_data

            # Filtrar conciertos del artista espec√≠fico
            artist_concerts = [c for c in all_concerts if c.get('artist_name', '') == artist_name]

            if not artist_concerts:
                await query.edit_message_text(
                    f"‚ùå No se encontraron conciertos para {artist_name}"
                )
                return

            # Mostrar todos los conciertos del artista usando formato original
            message = format_single_artist_concerts_complete(artist_concerts, artist_name, show_notified=True)

            # Bot√≥n para volver
            keyboard = [[
                InlineKeyboardButton("üîô Volver a la b√∫squeda", callback_data=f"back_to_search_{user_id}")
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )

        elif query.data.startswith("back_to_search_"):
            # Volver a la b√∫squeda original
            user_id = int(parts[3])

            # Obtener datos del cach√©
            cache_data = get_user_search_cache(user_id)
            if not cache_data:
                await query.edit_message_text(
                    "‚ùå La b√∫squeda ha expirado. Usa `/search` para buscar de nuevo."
                )
                return

            search_type, concerts = cache_data

            # Determinar el t√≠tulo basado en el tipo de b√∫squeda
            if search_type == "user_concerts":
                title = "üéµ Conciertos de tus artistas seguidos"
                show_notified = True
            else:
                # Extraer nombre del artista del tipo de b√∫squeda
                artist_name = search_type.replace("artist_search_", "")
                title = f"üéµ Conciertos de {artist_name}"
                show_notified = False

            # Volver al formato resumido ORIGINAL
            message, keyboard = format_concerts_message(
                concerts,
                title,
                show_notified=show_notified,
                show_expand_buttons=True,
                user_id=user_id
            )

            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                disable_web_page_preview=True,
                reply_markup=keyboard
            )

    except Exception as e:
        logger.error(f"Error en expand_concerts_callback: {e}")
        await query.edit_message_text(
            "‚ùå Error al expandir conciertos. Int√©ntalo de nuevo."
        )



async def show_artist_concerts_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja la selecci√≥n de mostrar conciertos de un artista desde botones inline"""
    query = update.callback_query
    await query.answer()

    try:
        # Parsear el callback data: show_artist_concerts_ARTISTNAME_USERID
        parts = query.data.split("_")
        if not query.data.startswith("show_artist_concerts_"):
            return

        user_id = int(parts[-1])  # √öltimo elemento es el user_id
        encoded_artist = "_".join(parts[3:-1])  # Todo entre "show_artist_concerts" y user_id

        # Decodificar el nombre del artista
        artist_name = encoded_artist.replace("__", "-").replace("_", " ")

        # Obtener todos los conciertos del usuario
        all_concerts = db.get_all_concerts_for_user(user_id)

        # Filtrar conciertos del artista espec√≠fico
        artist_concerts = [c for c in all_concerts if c.get('artist_name', '').lower() == artist_name.lower()]

        if not artist_concerts:
            await query.edit_message_text(
                f"‚ùå No se encontraron conciertos para {artist_name}"
            )
            return

        # Formatear mensaje detallado
        message = format_artist_concerts_detailed(artist_concerts, artist_name, show_notified=False)

        # Bot√≥n para volver
        keyboard = [[
            InlineKeyboardButton("üîô Volver al resumen", callback_data=f"back_to_summary_{user_id}")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Dividir en chunks si es muy largo
        if len(message) > 4000:
            chunks = split_long_message(message)

            # Editar mensaje original con el primer chunk
            await query.edit_message_text(
                chunks[0],
                parse_mode='Markdown',
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )

            # Enviar chunks adicionales
            for chunk in chunks[1:]:
                await query.message.reply_text(
                    chunk,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
        else:
            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )

    except Exception as e:
        logger.error(f"Error en show_artist_concerts_callback: {e}")
        await query.edit_message_text(
            "‚ùå Error al mostrar conciertos del artista. Int√©ntalo de nuevo."
        )


async def back_to_summary_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja el bot√≥n de volver al resumen"""
    query = update.callback_query
    await query.answer()

    try:
        # Parsear el callback data: back_to_summary_USERID
        user_id = int(query.data.split("_")[-1])

        # Obtener datos del cach√© o regenerar
        cache_data = get_user_search_cache(user_id)
        if not cache_data:
            await query.edit_message_text(
                "‚ùå La b√∫squeda ha expirado. Usa `/search` para buscar de nuevo."
            )
            return

        search_type, concerts = cache_data

        # Determinar el t√≠tulo basado en el tipo de b√∫squeda
        if search_type == "user_concerts":
            title = "üéµ Conciertos de tus artistas seguidos"
            show_notified = True
        else:
            # Extraer nombre del artista del tipo de b√∫squeda
            artist_name = search_type.replace("artist_search_", "")
            title = f"üéµ Conciertos de {artist_name}"
            show_notified = False

        # Volver al formato resumido
        message, keyboard = format_concerts_message(
            concerts,
            title,
            show_notified=show_notified,
            show_expand_buttons=True,
            user_id=user_id
        )

        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            disable_web_page_preview=True,
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"Error en back_to_summary_callback: {e}")
        await query.edit_message_text(
            "‚ùå Error al volver al resumen. Usa `/search` para buscar de nuevo."
        )


async def continent_selection_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja la selecci√≥n de continentes y muestra todos los pa√≠ses"""
    query = update.callback_query
    await query.answer()

    if not query.data.startswith("continent_"):
        return

    continent_code = query.data.replace("continent_", "")

    if not country_state_city:
        await query.edit_message_text("‚ùå Servicio de pa√≠ses no disponible.")
        return

    # Mensaje de estado
    await query.edit_message_text("üîç Cargando pa√≠ses del continente...")

    try:
        # Obtener todos los pa√≠ses
        countries = country_state_city.get_available_countries()

        if not countries:
            await query.edit_message_text(
                "‚ùå No se pudieron obtener los pa√≠ses."
            )
            return

        # Definir mapeo de pa√≠ses por continente (m√°s completo)
        continent_countries = {
            'europe': [
                'AD', 'AL', 'AT', 'BA', 'BE', 'BG', 'BY', 'CH', 'CY', 'CZ', 'DE', 'DK', 'EE', 'ES', 'FI', 'FR',
                'GB', 'GE', 'GR', 'HR', 'HU', 'IE', 'IS', 'IT', 'LI', 'LT', 'LU', 'LV', 'MC', 'MD', 'ME', 'MK',
                'MT', 'NL', 'NO', 'PL', 'PT', 'RO', 'RS', 'RU', 'SE', 'SI', 'SK', 'SM', 'UA', 'VA', 'XK'
            ],
            'north_america': [
                'AG', 'BB', 'BZ', 'CA', 'CR', 'CU', 'DM', 'DO', 'GD', 'GT', 'HN', 'HT', 'JM', 'KN', 'LC',
                'MX', 'NI', 'PA', 'SV', 'TT', 'US', 'VC'
            ],
            'south_america': [
                'AR', 'BO', 'BR', 'CL', 'CO', 'EC', 'FK', 'GF', 'GY', 'PE', 'PY', 'SR', 'UY', 'VE'
            ],
            'asia': [
                'AE', 'AF', 'AM', 'AZ', 'BD', 'BH', 'BN', 'BT', 'CN', 'ID', 'IL', 'IN', 'IQ', 'IR', 'JO',
                'JP', 'KG', 'KH', 'KP', 'KR', 'KW', 'KZ', 'LA', 'LB', 'LK', 'MM', 'MN', 'MO', 'MV', 'MY',
                'NP', 'OM', 'PH', 'PK', 'PS', 'QA', 'SA', 'SG', 'SY', 'TH', 'TJ', 'TL', 'TM', 'TR', 'TW',
                'UZ', 'VN', 'YE'
            ],
            'oceania': [
                'AS', 'AU', 'CK', 'FJ', 'FM', 'GU', 'KI', 'MH', 'MP', 'NC', 'NR', 'NU', 'NZ', 'PF', 'PG',
                'PN', 'PW', 'SB', 'TK', 'TO', 'TV', 'VU', 'WF', 'WS'
            ],
            'africa': [
                'AO', 'BF', 'BI', 'BJ', 'BW', 'CD', 'CF', 'CG', 'CI', 'CM', 'CV', 'DJ', 'DZ', 'EG', 'EH',
                'ER', 'ET', 'GA', 'GH', 'GM', 'GN', 'GQ', 'GW', 'KE', 'KM', 'LR', 'LS', 'LY', 'MA', 'MG',
                'ML', 'MR', 'MU', 'MW', 'MZ', 'NA', 'NE', 'NG', 'RW', 'SC', 'SD', 'SL', 'SN', 'SO', 'SS',
                'ST', 'SZ', 'TD', 'TG', 'TN', 'TZ', 'UG', 'ZA', 'ZM', 'ZW'
            ]
        }

        # Determinar qu√© pa√≠ses mostrar
        if continent_code == "all":
            selected_countries = countries
            continent_name = "Todos los continentes"
            continent_emoji = "üåç"
        else:
            # Filtrar pa√≠ses del continente seleccionado
            continent_codes = continent_countries.get(continent_code, [])

            # Crear diccionario de pa√≠ses por c√≥digo para b√∫squeda r√°pida
            countries_by_code = {}
            for country in countries:
                code = country.get('iso2', country.get('code', ''))
                if code:
                    countries_by_code[code] = country

            # Filtrar pa√≠ses del continente
            selected_countries = []
            for code in continent_codes:
                if code in countries_by_code:
                    selected_countries.append(countries_by_code[code])

            # Obtener nombre y emoji del continente
            continent_info = {
                'europe': ('üá™üá∫', 'Europa'),
                'north_america': ('üá∫üá∏', 'Am√©rica del Norte'),
                'south_america': ('üáßüá∑', 'Am√©rica del Sur'),
                'asia': ('üá®üá≥', 'Asia'),
                'oceania': ('üá¶üá∫', 'Ocean√≠a'),
                'africa': ('üáøüá¶', '√Åfrica'),
                'others': ('üåç', 'Otros')
            }

            continent_emoji, continent_name = continent_info.get(continent_code, ('üåç', 'Desconocido'))

        # Si hay pa√≠ses para otros continentes, a√±adirlos a "others"
        if continent_code == "others":
            all_continent_codes = set()
            for codes in continent_countries.values():
                all_continent_codes.update(codes)

            countries_by_code = {country.get('iso2', country.get('code', '')): country for country in countries}
            selected_countries = [country for code, country in countries_by_code.items()
                                if code and code not in all_continent_codes]

        if not selected_countries:
            await query.edit_message_text(
                f"‚ùå No se encontraron pa√≠ses para {continent_name}.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô Volver a continentes", callback_data="back_to_continents")
                ]])
            )
            return

        # Ordenar pa√≠ses alfab√©ticamente
        selected_countries.sort(key=lambda x: x.get('name', ''))

        # Crear mensaje con todos los pa√≠ses del continente
        message_lines = [
            f"{continent_emoji} *Pa√≠ses de {continent_name}*\n",
            f"üìä Total: {len(selected_countries)} pa√≠ses\n"
        ]

        # Mostrar TODOS los pa√≠ses (sin l√≠mites)
        for i, country in enumerate(selected_countries, 1):
            code = country.get('iso2', country.get('code', ''))
            name = country.get('name', 'Nombre desconocido')

            # Informaci√≥n adicional si est√° disponible
            details = []
            if country.get('phonecode'):
                details.append(f"+{country['phonecode']}")
            if country.get('currency'):
                details.append(f"{country['currency']}")

            line = f"{i:2d}. *{code}* - {name}"
            if details:
                line += f" ({' | '.join(details)})"

            message_lines.append(line)

        message_lines.append(f"\nüí° *Uso:* `/addcountry <c√≥digo>` o `/addcountry <nombre>`")

        response = "\n".join(message_lines)

        # Bot√≥n para volver
        keyboard = [[InlineKeyboardButton("üîô Volver a continentes", callback_data="back_to_continents")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Dividir en chunks si es muy largo
        if len(response) > 4000:
            chunks = split_long_message(response, max_length=4000)

            # Editar mensaje original con el primer chunk
            await query.edit_message_text(
                chunks[0],
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

            # Enviar chunks adicionales
            for chunk in chunks[1:]:
                await query.message.reply_text(
                    chunk,
                    parse_mode='Markdown'
                )
        else:
            await query.edit_message_text(
                response,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

    except Exception as e:
        logger.error(f"Error mostrando pa√≠ses del continente: {e}")
        await query.edit_message_text(
            "‚ùå Error cargando pa√≠ses. Int√©ntalo de nuevo.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô Volver a continentes", callback_data="back_to_continents")
            ]])
        )


async def back_to_continents_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Vuelve al men√∫ de selecci√≥n de continentes"""
    query = update.callback_query
    await query.answer()

    # Simular el comando listcountries original
    fake_update = type('obj', (object,), {
        'message': query.message
    })()

    fake_context = type('obj', (object,), {
        'args': []
    })()

    # Reutilizar la l√≥gica del comando original
    if not country_state_city:
        await query.edit_message_text("‚ùå Servicio de pa√≠ses no disponible.")
        return

    try:
        # Obtener pa√≠ses para verificar disponibilidad
        countries = country_state_city.get_available_countries()

        if not countries:
            await query.edit_message_text(
                "‚ùå No se pudieron obtener los pa√≠ses disponibles."
            )
            return

        # Crear mensaje con botones de continentes
        message = (
            "üåç *Pa√≠ses disponibles por continente*\n\n"
            f"üìä Total de pa√≠ses: {len(countries)}\n\n"
            "Selecciona un continente para ver todos sus pa√≠ses:"
        )

        # Definir continentes con emojis
        continents = [
            ("üá™üá∫", "Europa", "europe"),
            ("üá∫üá∏", "Am√©rica del Norte", "north_america"),
            ("üáßüá∑", "Am√©rica del Sur", "south_america"),
            ("üá®üá≥", "Asia", "asia"),
            ("üá¶üá∫", "Ocean√≠a", "oceania"),
            ("üáøüá¶", "√Åfrica", "africa"),
            ("üåç", "Otros", "others")
        ]

        # Crear teclado con botones de continentes
        keyboard = []
        for emoji, name, code in continents:
            keyboard.append([InlineKeyboardButton(f"{emoji} {name}", callback_data=f"continent_{code}")])

        # Bot√≥n para ver todos los pa√≠ses de una vez
        keyboard.append([InlineKeyboardButton("üìã Ver todos los pa√≠ses", callback_data="continent_all")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"Error volviendo a continentes: {e}")
        await query.edit_message_text(
            "‚ùå Error al cargar continentes."
        )


async def list_page_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja la navegaci√≥n de p√°ginas en el comando /list"""
    query = update.callback_query
    await query.answer()

    # Parsear callback data: list_page_PAGE_USERID
    try:
        parts = query.data.split("_")
        if len(parts) != 4 or parts[0] != "list" or parts[1] != "page":
            return

        page = int(parts[2])
        user_id = int(parts[3])

        # Obtener datos de la paginaci√≥n
        pagination_data = db.get_list_pagination_data(user_id)
        if not pagination_data:
            await query.edit_message_text(
                "‚ùå Los datos han expirado. Usa `/list` de nuevo."
            )
            return

        followed_artists, display_name = pagination_data

        # Mostrar p√°gina solicitada
        fake_update = type('obj', (object,), {'callback_query': query, 'message': query.message})()
        response, keyboard = await show_artists_page(fake_update, user_id, followed_artists, display_name, page, edit_message=True)

        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

        await query.edit_message_text(
            response,
            parse_mode='Markdown',
            disable_web_page_preview=True,
            reply_markup=reply_markup
        )

    except (ValueError, IndexError) as e:
        logger.error(f"Error en callback de paginaci√≥n: {e}")
        await query.edit_message_text(
            "‚ùå Error en la navegaci√≥n. Usa `/list` de nuevo."
        )


async def config_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja todos los callbacks del sistema de configuraci√≥n - VERSI√ìN CORREGIDA"""
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    logger.info(f"Config callback recibido: {callback_data}")

    # Parsear callback data
    parts = callback_data.split("_")
    if len(parts) < 3:
        await query.edit_message_text("‚ùå Error en el callback.")
        return

    prefix = parts[0]  # 'config', 'notif', 'country', 'service', 'artist'
    action = parts[1]

    # Obtener user_id del final
    try:
        user_id = int(parts[-1])
    except (ValueError, IndexError):
        await query.edit_message_text("‚ùå Error de usuario.")
        return

    # Verificar que el usuario existe
    user = db.get_user_by_chat_id(query.message.chat_id)
    if not user or user['id'] != user_id:
        await query.edit_message_text("‚ùå Error de autenticaci√≥n.")
        return

    services = get_services()

    try:
        # Manejar seg√∫n el prefijo
        if prefix == "config":
            if action == "notifications":
                await show_notifications_menu(query, user)
            elif action == "countries":
                await show_countries_menu(query, user, services)
            elif action == "services":
                await show_services_menu(query, user)
            elif action == "artists":
                await show_artists_menu(query, user)
            elif action == "refresh" or action == "back":
                # Actualizar la configuraci√≥n
                updated_user = db.get_user_by_chat_id(query.message.chat_id)
                fake_update = type('obj', (object,), {'callback_query': query})()
                await show_config_menu(fake_update, updated_user, edit_message=True)

        elif prefix == "notif":
            message, keyboard = await handle_notification_callback(query, action, user_id, context, user_services)
            reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(btn["text"], callback_data=btn["callback_data"])] for btn in keyboard[0]]) if keyboard else None
            await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)

        elif prefix == "country":
            message, keyboard = await handle_country_callback(query, action, user_id, parts, context, services)
            reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(btn["text"], callback_data=btn["callback_data"])] for btn in keyboard[0]]) if keyboard else None
            await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)

        elif prefix == "service":
            message, keyboard = await handle_service_callback(query, action, user_id, parts, user_services)
            reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(btn["text"], callback_data=btn["callback_data"])] for btn in keyboard[0]]) if keyboard else None
            await query.edit_message_text(message, reply_markup=reply_markup)

        # CORRECCI√ìN: A√±adir manejo de callbacks de artistas
        elif prefix == "artist":
            if action == "add":
                # Solicitar nombre de artista
                message = (
                    "‚ûï *A√±adir artista*\n\n"
                    "Env√≠a el nombre del artista que quieres seguir.\n"
                    "Ejemplo: Radiohead\n\n"
                    "Responde a este mensaje con el nombre del artista."
                )
                context.user_data['waiting_for_artist_add'] = user_id
                keyboard = [[InlineKeyboardButton("‚ùå Cancelar", callback_data=f"config_artists_{user_id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)

            elif action == "search":
                # Redirigir a b√∫squeda de conciertos
                await query.edit_message_text(
                    "üîç *Buscar conciertos*\n\n"
                    "Usa `/search` para buscar nuevos conciertos de tus artistas seguidos.\n"
                    "Usa `/show` para ver conciertos ya guardados en base de datos."
                )
            else:
                await query.edit_message_text("‚ùå Acci√≥n de artista no reconocida.")

        else:
            await query.edit_message_text("‚ùå Acci√≥n no reconocida.")

    except Exception as e:
        logger.error(f"Error en config_callback_handler: {e}")
        await query.edit_message_text("‚ùå Error procesando la solicitud.")


# CORRECCI√ìN CON DEBUG para Last.fm

# ===========================
# 1. CORRECCI√ìN en handle_lastfm_period_selection en handlers_helpers.py
# ===========================

async def handle_lastfm_period_selection(query, user: Dict, period: str, services, database):
    """Maneja la selecci√≥n de per√≠odo de Last.fm - VERSI√ìN CON DEBUG"""
    import logging
    logger = logging.getLogger(__name__)

    logger.info(f"=== handle_lastfm_period_selection: usuario {user['id']}, per√≠odo {period} ===")

    lastfm_service = services.get('lastfm_service')

    if not lastfm_service:
        await query.edit_message_text("‚ùå Servicio de Last.fm no disponible.")
        return

    # Obtener usuario de Last.fm
    lastfm_user = database.get_user_lastfm(user['id'])
    if not lastfm_user:
        await query.edit_message_text("‚ùå No tienes usuario de Last.fm configurado.")
        return

    username = lastfm_user['lastfm_username']
    sync_limit = lastfm_user.get('sync_limit', 20)

    logger.info(f"Usuario: {username}, l√≠mite: {sync_limit}")

    # Mensaje de estado
    period_name = lastfm_service.get_period_display_name(period)
    await query.edit_message_text(
        f"üîç Obteniendo top artistas de {username} ({period_name})...\n"
        f"Esto puede tardar un momento."
    )

    try:
        logger.info("Llamando a get_top_artists...")
        # Obtener artistas de Last.fm
        artists, status_message = lastfm_service.get_top_artists(username, period, sync_limit)

        logger.info(f"Resultado get_top_artists: {len(artists)} artistas")
        logger.info(f"Status: {status_message}")
        logger.info(f"Primeros 3 artistas: {[a.get('name', 'sin nombre') for a in artists[:3]]}")

        if not artists:
            logger.warning("No se encontraron artistas")
            await query.edit_message_text(
                f"üì≠ No se encontraron artistas para el per√≠odo {period_name}.\n"
                f"Estado: {status_message}"
            )
            return

        logger.info("Guardando selecci√≥n pendiente...")
        # Guardar selecci√≥n pendiente
        save_result = database.save_pending_lastfm_sync(user['id'], period, artists)
        logger.info(f"Selecci√≥n guardada: {save_result}")

        logger.info("Mostrando primera p√°gina...")
        # Mostrar primera p√°gina - IMPORTAR FUNCI√ìN AQU√ç
        from handlers_helpers import show_lastfm_artists_page
        await show_lastfm_artists_page(query, user, period, artists, page=0, services=services)
        logger.info("P√°gina mostrada correctamente")

    except Exception as e:
        logger.error(f"Error obteniendo artistas de Last.fm: {e}")
        import traceback
        logger.error(f"Traceback completo: {traceback.format_exc()}")

        await query.edit_message_text(
            f"‚ùå Error obteniendo artistas de {username}.\n"
            f"Error: {str(e)}\n"
            f"Int√©ntalo de nuevo m√°s tarde."
        )

# ===========================
# 2. CORRECCI√ìN en show_lastfm_artists_page en handlers_helpers.py
# ===========================

async def show_lastfm_artists_page(query, user: Dict, period: str, artists: List[Dict],
                                  page: int = 0, services: Dict = None):
    """Muestra una p√°gina de artistas de Last.fm con paginaci√≥n - VERSI√ìN CON DEBUG"""
    import logging
    logger = logging.getLogger(__name__)

    logger.info(f"=== show_lastfm_artists_page: {len(artists)} artistas, p√°gina {page}, per√≠odo {period} ===")

    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    lastfm_service = services.get('lastfm_service') if services else None

    artists_per_page = 15
    total_pages = (len(artists) + artists_per_page - 1) // artists_per_page

    if page >= total_pages:
        page = total_pages - 1
    elif page < 0:
        page = 0

    start_idx = page * artists_per_page
    end_idx = min(start_idx + artists_per_page, len(artists))
    page_artists = artists[start_idx:end_idx]

    logger.info(f"Mostrando artistas {start_idx}-{end_idx} de {len(artists)}")

    # Obtener nombre del per√≠odo
    period_name = lastfm_service.get_period_display_name(period) if lastfm_service else period

    # Obtener username de la base de datos
    try:
        from database import ArtistTrackerDatabase
        temp_db = ArtistTrackerDatabase()
        lastfm_user = temp_db.get_user_lastfm(user['id'])
        username = lastfm_user['lastfm_username'] if lastfm_user else user.get('lastfm_username', 'Usuario')
    except Exception as e:
        logger.error(f"Error obteniendo username: {e}")
        username = user.get('lastfm_username', 'Usuario')

    logger.info(f"Username: {username}, per√≠odo: {period_name}")

    # Construir texto
    message_lines = [
        f"üéµ *Top artistas de {username}*",
        f"üìä Per√≠odo: {period_name}",
        f"üî¢ Total encontrados: {len(artists)} artistas",
        f"üìÑ P√°gina {page + 1} de {total_pages}\n"
    ]

    # Contar artistas con MBID en esta p√°gina
    mbid_count = sum(1 for artist in page_artists if artist.get("mbid"))

    for i, artist in enumerate(page_artists, start_idx + 1):
        playcount = artist.get("playcount", 0)
        name = artist.get("name", "Nombre desconocido")
        mbid = artist.get("mbid", "")

        # Escapar caracteres especiales para Markdown
        safe_name = name.replace("*", "\\*").replace("_", "\\_").replace("`", "\\`").replace("[", "\\[")

        line = f"{i}. *{safe_name}*"

        # A√±adir informaci√≥n de reproducci√≥n
        if playcount > 0:
            line += f" ({playcount:,} reproducciones)"

        # Indicar si tiene MBID
        if mbid:
            line += " üéµ"

        # A√±adir g√©neros si est√°n disponibles
        genres = artist.get("genres", [])
        if genres:
            genre_text = ", ".join(genres[:2])
            line += f" _{genre_text}_"

        message_lines.append(line)

    message_lines.append("")
    message_lines.append(f"üéµ {mbid_count}/{len(page_artists)} artistas con MBID para sincronizaci√≥n precisa")

    # Crear botones
    keyboard = []
    nav_buttons = []

    # Bot√≥n anterior
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(
            "‚¨ÖÔ∏è Anterior",
            callback_data=f"lastfm_page_{period}_{page-1}_{user['id']}"
        ))

    # Bot√≥n de p√°gina actual
    nav_buttons.append(InlineKeyboardButton(
        f"üìÑ {page + 1}/{total_pages}",
        callback_data="current_lastfm_page"
    ))

    # Bot√≥n siguiente
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(
            "Siguiente ‚û°Ô∏è",
            callback_data=f"lastfm_page_{period}_{page+1}_{user['id']}"
        ))

    if nav_buttons:
        keyboard.append(nav_buttons)

    # Bot√≥n para confirmar sincronizaci√≥n
    keyboard.append([InlineKeyboardButton(
        "‚úÖ Sincronizar todos",
        callback_data=f"lastfm_sync_{period}_{user['id']}"
    )])

    # Bot√≥n para cancelar
    keyboard.append([InlineKeyboardButton(
        "‚ùå Cancelar",
        callback_data=f"lastfm_cancel_{user['id']}"
    )])

    message = "\n".join(message_lines)

    logger.info(f"Mensaje preparado: {len(message)} caracteres")
    logger.info(f"Teclado: {len(keyboard)} filas de botones")

    # Actualizar mensaje
    try:
        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        logger.info("Mensaje de Last.fm enviado correctamente")
    except Exception as e:
        logger.error(f"Error enviando mensaje de Last.fm: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        await query.edit_message_text("‚ùå Error mostrando artistas de Last.fm.")

# ===========================
# 3. VERIFICAR en lastfm_callback_handler en telegram_bot.py
# ===========================

# Aseg√∫rate de que esta funci√≥n est√© en telegram_bot.py:
async def lastfm_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja todos los callbacks de Last.fm - VERSI√ìN CON DEBUG"""
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    logger.info(f"Last.fm callback recibido: {callback_data}")

    # Parsear callback data
    parts = callback_data.split("_")
    if len(parts) < 3 or parts[0] != "lastfm":
        await query.edit_message_text("‚ùå Callback no v√°lido.")
        return

    action = parts[1]

    # Obtener user_id del final
    try:
        user_id = int(parts[-1])
    except (ValueError, IndexError):
        await query.edit_message_text("‚ùå Error de usuario.")
        return

    # Verificar que el usuario existe
    user = db.get_user_by_chat_id(query.message.chat_id)
    if not user or user['id'] != user_id:
        await query.edit_message_text("‚ùå Error de autenticaci√≥n.")
        return

    services = get_services()

    try:
        if action == "cancel":
            await query.edit_message_text("‚ùå Configuraci√≥n de Last.fm cancelada.")

        elif action == "period":
            period = parts[2] if len(parts) > 2 else ""
            logger.info(f"Manejando per√≠odo: {period}")
            await handle_lastfm_period_selection(query, user, period, services, db)

        elif action == "page":
            # Manejar paginaci√≥n
            period = parts[2] if len(parts) > 2 else ""
            page = int(parts[3]) if len(parts) > 3 else 0

            logger.info(f"Manejando p√°gina: per√≠odo={period}, p√°gina={page}")

            # Obtener artistas pendientes
            artists = db.get_pending_lastfm_sync(user['id'], period) if db else []
            if artists:
                await show_lastfm_artists_page(query, user, period, artists, page, services)
            else:
                await query.edit_message_text("‚ùå No hay datos de artistas disponibles.")

        elif callback_data == "current_lastfm_page":
            # No hacer nada si presiona el bot√≥n de p√°gina actual
            return

        elif action == "sync":
            period = parts[2] if len(parts) > 2 else ""
            logger.info(f"Manejando sincronizaci√≥n: per√≠odo={period}")

            message, keyboard = await handle_lastfm_do_sync(query, user, period, db, services)
            if keyboard:
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            else:
                await query.edit_message_text(message, parse_mode='Markdown')

        elif action == "limit":
            message, keyboard = await handle_lastfm_change_limit(query, user, context)
            if keyboard:
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            else:
                await query.edit_message_text(message, parse_mode='Markdown')

        elif action == "changeuser":
            message, keyboard = await handle_lastfm_change_user(query, user, context)
            if keyboard:
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            else:
                await query.edit_message_text(message, parse_mode='Markdown')

        elif action == "menu":
            # Volver al men√∫ principal de Last.fm
            lastfm_user = db.get_user_lastfm(user['id']) if db else None
            if lastfm_user:
                # Crear fake_update para show_lastfm_menu
                fake_update = type('obj', (object,), {
                    'message': query.message,
                    'callback_query': query
                })()
                await show_lastfm_menu(fake_update, user, lastfm_user)
            else:
                await query.edit_message_text("‚ùå No tienes usuario de Last.fm configurado.")

        else:
            await query.edit_message_text("‚ùå Acci√≥n no reconocida.")

    except Exception as e:
        logger.error(f"Error en lastfm_callback_handler: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        await query.edit_message_text("‚ùå Error procesando la solicitud.")



async def show_country_selection(update, countries: List[Dict], original_query: str, message_to_edit):
    """Muestra una lista de pa√≠ses para que el usuario elija - FUNCI√ìN FALTANTE"""
    chat_id = update.effective_chat.id

    # Guardar pa√≠ses para posterior selecci√≥n
    db.save_pending_selection(chat_id, countries, original_query)

    # Crear mensaje con opciones
    message_lines = [f"üåç *Encontr√© varios pa√≠ses para '{original_query}':*\n"]

    keyboard = []
    for i, country in enumerate(countries[:8]):  # Limitar a 8 opciones
        # Formatear informaci√≥n del pa√≠s
        country_name = country.get('name', 'Desconocido')
        country_code = country.get('code', '')

        info_parts = []
        if country.get('currency'):
            info_parts.append(f"üí∞ {country['currency']}")
        if country.get('phone_code'):
            info_parts.append(f"üìû +{country['phone_code']}")

        info_text = " ‚Ä¢ ".join(info_parts) if info_parts else ""

        option_text = f"{i+1}. *{country_name}* ({country_code})"
        if info_text:
            option_text += f"\n   _{info_text}_"

        message_lines.append(option_text)

        # Bot√≥n para esta opci√≥n
        button_text = f"{i+1}. {country_name}"
        if len(button_text) > 30:
            button_text = button_text[:27] + "..."

        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"select_country_{i}")])

    # Bot√≥n de cancelar
    keyboard.append([InlineKeyboardButton("‚ùå Cancelar", callback_data="cancel_country_selection")])

    message_lines.append("\n*Selecciona el pa√≠s correcto:*")

    reply_markup = InlineKeyboardMarkup(keyboard)
    response = "\n".join(message_lines)

    try:
        await message_to_edit.edit_text(
            response,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error mostrando selecci√≥n de pa√≠ses: {e}")
        await message_to_edit.edit_text("‚ùå Error mostrando pa√≠ses.")





async def spotify_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja todos los callbacks de Spotify con OAuth - VERSI√ìN CORREGIDA"""
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    logger.info(f"Spotify callback recibido: {callback_data}")

    # Parsear callback data
    parts = callback_data.split("_")
    if len(parts) < 3 or parts[0] != "spotify":
        await query.edit_message_text("‚ùå Callback no v√°lido.")
        return

    action = parts[1]

    # Obtener user_id del final
    try:
        user_id = int(parts[-1])
    except (ValueError, IndexError):
        await query.edit_message_text("‚ùå Error de usuario.")
        return

    # Verificar que el usuario existe
    user = db.get_user_by_chat_id(query.message.chat_id)
    if not user or user['id'] != user_id:
        await query.edit_message_text("‚ùå Error de autenticaci√≥n.")
        return

    services = get_services()
    spotify_service = services.get('spotify_service')

    if not spotify_service:
        await query.edit_message_text("‚ùå Servicio de Spotify no disponible.")
        return

    try:
        if action == "cancel":
            await query.edit_message_text("‚ùå Configuraci√≥n de Spotify cancelada.")

        elif action == "auth":
            # Marcar que estamos esperando c√≥digo OAuth
            context.user_data['waiting_for_spotify_code'] = user['id']
            message, keyboard, auth_url = await handle_spotify_authentication(query, user, services)
            if keyboard:
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup, disable_web_page_preview=False)
            else:
                await query.edit_message_text(message, parse_mode='Markdown')

        elif action == "username":
            # Configuraci√≥n solo con nombre de usuario (modo limitado)
            context.user_data['waiting_for_spotify_user'] = user['id']
            await show_spotify_username_setup(query, user)

        elif action == "real" and len(parts) > 2 and parts[2] == "artists":
            await handle_spotify_real_artists(query, user, services, db)

        elif action == "artists":
            await handle_spotify_show_artists(query, user, services, db)

        elif action == "add":
            message, keyboard = await handle_spotify_add_artists(query, user, db)
            if keyboard:
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            else:
                await query.edit_message_text(message, parse_mode='Markdown')

        elif action == "limit":
            message, keyboard = await handle_spotify_change_limit(query, user, context)
            if keyboard:
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            else:
                await query.edit_message_text(message, parse_mode='Markdown')

        elif action == "changeuser":
            message, keyboard = await handle_spotify_change_user(query, user, context)
            if keyboard:
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            else:
                await query.edit_message_text(message, parse_mode='Markdown')

        elif action == "page":
            period = parts[2] if len(parts) > 2 else ""
            page = int(parts[3]) if len(parts) > 3 else 0

            artists = db.get_pending_spotify_artists(user['id']) if db else []
            if artists:
                await show_spotify_artists_page(query, user, artists, page, services=services)
            else:
                await query.edit_message_text("‚ùå No hay datos de artistas disponibles.")

        elif action == "real" and len(parts) > 2 and parts[2] == "page":
            page = int(parts[3]) if len(parts) > 3 else 0

            artists = db.get_pending_spotify_artists(user['id']) if db else []
            if artists:
                await show_spotify_artists_page(query, user, artists, page, is_real=True, services=services)
            else:
                await query.edit_message_text("‚ùå No hay datos de artistas disponibles.")

        # CORRECCI√ìN CR√çTICA: Manejo del callback "menu"
        elif action == "menu":
            # Volver al men√∫ principal de Spotify
            spotify_user = db.get_user_spotify(user['id']) if db else None
            if spotify_user:
                # CORRECCI√ìN: Crear un objeto fake_update para show_spotify_menu
                fake_update = type('obj', (object,), {
                    'message': query.message,
                    'callback_query': query
                })()
                await show_spotify_menu(fake_update, user, spotify_user)
            else:
                await query.edit_message_text("‚ùå No tienes usuario de Spotify configurado.")

        # CORRECCI√ìN CR√çTICA: A√±adir manejo de otros callbacks faltantes
        elif action == "revoke":
            # Revocar autenticaci√≥n
            if spotify_service.revoke_user_authentication(user['id']):
                await query.edit_message_text(
                    "‚úÖ Autenticaci√≥n revocada correctamente.\n"
                    "Tendr√°s que autenticarte de nuevo para acceder a tus artistas seguidos."
                )
            else:
                await query.edit_message_text("‚ùå Error al revocar autenticaci√≥n.")

        elif action == "follow":
            # Funcionalidad de seguir artistas en Spotify
            await query.edit_message_text(
                "üîó *Seguir artistas en Spotify*\n\n"
                "Esta funcionalidad permitir√° seguir autom√°ticamente en Spotify "
                "los artistas que a√±adas al bot.\n\n"
                "‚ö†Ô∏è En desarrollo..."
            )

        elif action == "playlists":
            if len(parts) > 2 and parts[2] == "page":
                # Paginaci√≥n de playlists
                page = int(parts[3]) if len(parts) > 3 else 0
                playlists = db.get_pending_playlists(user['id']) if db else []
                if playlists:
                    await show_spotify_playlists_page(query, user, playlists, page, services)
                else:
                    await query.edit_message_text("‚ùå No hay datos de playlists disponibles.")
            else:
                # Mostrar playlists
                await handle_spotify_playlists(query, user, services, db)

        elif action == "playlist":
            if parts[2] == "view":
                # Ver playlist espec√≠fica
                playlist_id = parts[3] if len(parts) > 3 else ""
                await handle_spotify_playlist_view(query, user, playlist_id, services, db)
            elif parts[2] == "artists" and parts[3] == "page":
                # Paginaci√≥n de artistas de playlist
                playlist_id = parts[4] if len(parts) > 4 else ""
                page = int(parts[5]) if len(parts) > 5 else 0

                playlist_data = db.get_pending_playlist_artists(user['id'], playlist_id)
                if playlist_data:
                    # Obtener info de la playlist desde las playlists guardadas
                    playlists = db.get_pending_playlists(user['id'])
                    playlist_info = next((p for p in playlists if p.get('id') == playlist_id), {}) if playlists else {}

                    await show_spotify_playlist_artists_page(
                        query, user, playlist_id, playlist_info,
                        playlist_data['artists'], page, services
                    )
                else:
                    await query.edit_message_text("‚ùå No hay datos de artistas de playlist disponibles.")
            elif parts[2] == "follow" and parts[3] == "all":
                # Seguir todos los artistas de una playlist
                playlist_id = parts[4] if len(parts) > 4 else ""
                await handle_spotify_playlist_follow_all(query, user, playlist_id, db)


        else:
            await query.edit_message_text("‚ùå Acci√≥n no reconocida.")



    except Exception as e:
        logger.error(f"Error en spotify_callback_handler: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        await query.edit_message_text("‚ùå Error procesando la solicitud.")




async def playlist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /playlist - a√±ade artistas de una playlist de Spotify por URL"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå Uso incorrecto. Debes especificar la URL de la playlist.\n"
            "Ejemplo: `/playlist https://open.spotify.com/playlist/37i9dQZF1DXcBWIGoYBM5M`\n\n"
            "üí° Para obtener la URL:\n"
            "1. Abre Spotify\n"
            "2. Ve a la playlist\n"
            "3. Clic en '...' ‚Üí 'Compartir' ‚Üí 'Copiar enlace de la playlist'\n"
            "4. Pega el enlace aqu√≠",
            parse_mode='Markdown'
        )
        return

    playlist_url = context.args[0]
    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    services = get_services()
    spotify_service = services.get('spotify_service')

    if not spotify_service:
        await update.message.reply_text(
            "‚ùå Servicio de Spotify no disponible.\n"
            "Contacta al administrador para configurar las credenciales."
        )
        return

    # Verificar autenticaci√≥n
    if not spotify_service.is_user_authenticated(user['id']):
        await update.message.reply_text(
            "‚ùå No est√°s autenticado con Spotify.\n"
            "Usa `/spotify` y autent√≠cate primero."
        )
        return

    # Validar URL
    import re
    if not re.search(r'open\.spotify\.com/playlist/[a-zA-Z0-9]+', playlist_url):
        await update.message.reply_text(
            "‚ùå URL de playlist inv√°lida.\n"
            "Debe ser una URL de Spotify como:\n"
            "`https://open.spotify.com/playlist/XXXXXXXXX`",
            parse_mode='Markdown'
        )
        return

    # Mensaje de estado
    status_message = await update.message.reply_text(
        f"üîç Analizando playlist de Spotify...\n"
        f"Obteniendo informaci√≥n..."
    )

    try:
        # Obtener informaci√≥n de la playlist
        playlist_info, status = spotify_service.get_playlist_by_url(user['id'], playlist_url)

        if not playlist_info:
            await status_message.edit_text(
                f"‚ùå No se pudo obtener informaci√≥n de la playlist.\n"
                f"Estado: {status}\n\n"
                f"üí° Verifica que:\n"
                f"‚Ä¢ La URL sea correcta\n"
                f"‚Ä¢ La playlist sea p√∫blica o tengas acceso\n"
                f"‚Ä¢ Est√©s autenticado correctamente"
            )
            return

        playlist_name = playlist_info.get('name', 'Playlist')
        tracks_total = playlist_info.get('tracks_total', 0)
        playlist_id = playlist_info.get('id', '')

        await status_message.edit_text(
            f"‚úÖ Playlist encontrada: *{playlist_name}*\n"
            f"üìä Total de canciones: {tracks_total}\n\n"
            f"üîç Obteniendo artistas...",
            parse_mode='Markdown'
        )

        # Obtener artistas de la playlist
        artists, artist_status = spotify_service.get_playlist_tracks(user['id'], playlist_id)

        if not artists:
            await status_message.edit_text(
                f"üì≠ No se encontraron artistas en la playlist '{playlist_name}'.\n"
                f"Estado: {artist_status}"
            )
            return

        await status_message.edit_text(
            f"‚úÖ Playlist: *{playlist_name}*\n"
            f"üé§ Artistas √∫nicos encontrados: {len(artists)}\n\n"
            f"‚è≥ A√±adiendo artistas a tu lista de seguimiento...\n"
            f"Esto puede tardar un momento.",
            parse_mode='Markdown'
        )

        # A√±adir artistas a la base de datos
        added_count = 0
        skipped_count = 0
        error_count = 0

        for i, artist_data in enumerate(artists, 1):
            artist_name = artist_data.get('name', '')

            # Actualizar progreso cada 5 artistas
            if i % 5 == 0 or i == len(artists):
                progress_msg = (
                    f"‚è≥ A√±adiendo artistas de '{playlist_name}'...\n"
                    f"Progreso: {i}/{len(artists)}\n"
                    f"‚úÖ A√±adidos: {added_count} | ‚è≠Ô∏è Ya seguidos: {skipped_count} | ‚ùå Errores: {error_count}"
                )
                try:
                    await status_message.edit_text(progress_msg)
                except:
                    pass

            if not artist_name:
                error_count += 1
                continue

            try:
                # Buscar candidatos en MusicBrainz
                candidates = db.search_artist_candidates(artist_name)

                if not candidates:
                    skipped_count += 1
                    continue

                # Usar el mejor candidato
                best_candidate = candidates[0]
                artist_id = db.create_artist_from_candidate(best_candidate)

                if not artist_id:
                    error_count += 1
                    continue

                # A√±adir a seguimiento
                was_new = db.add_followed_artist(user['id'], artist_id)

                if was_new:
                    added_count += 1
                else:
                    skipped_count += 1

                # Pausa breve
                await asyncio.sleep(0.1)

            except Exception as e:
                logger.error(f"Error procesando artista {artist_name}: {e}")
                error_count += 1
                continue

        # Mensaje de resultado final
        message = (
            f"‚úÖ *Playlist sincronizada*\n\n"
            f"üéµ Playlist: {playlist_name}\n"
            f"üé§ Artistas procesados: {len(artists)}\n"
            f"‚ûï Nuevos artistas a√±adidos: {added_count}\n"
            f"‚è≠Ô∏è Ya segu√≠as: {skipped_count}\n"
        )

        if error_count > 0:
            message += f"‚ùå Errores: {error_count}\n"

        # Calcular porcentaje de √©xito
        success_rate = ((added_count + skipped_count) / len(artists)) * 100 if artists else 0
        message += f"üìà Tasa de √©xito: {success_rate:.1f}%\n"

        message += (
            f"\nüí° *Comandos √∫tiles:*\n"
            f"‚Ä¢ `/list` - Ver todos tus artistas seguidos\n"
            f"‚Ä¢ `/search` - Buscar conciertos de tus artistas\n"
            f"‚Ä¢ `/spotify` - Gestionar m√°s playlists"
        )

        await status_message.edit_text(message, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"Error en comando playlist: {e}")
        await status_message.edit_text(
            f"‚ùå Error procesando la playlist.\n"
            f"Error: {str(e)}\n\n"
            f"üí° Int√©ntalo de nuevo o contacta al administrador."
        )



async def show_spotify_username_setup(query, user: Dict):
    """Muestra setup solo para nombre de usuario (modo limitado)"""
    message = (
        "üë§ *Configuraci√≥n b√°sica de Spotify*\n\n"
        "Este modo te permite ver artistas simulados y configuraci√≥n b√°sica, "
        "pero no podr√°s acceder a tus artistas realmente seguidos.\n\n"
        "Env√≠a tu nombre de usuario de Spotify:"
    )

    keyboard = [
        [InlineKeyboardButton("üîê Mejor usar autenticaci√≥n completa", callback_data=f"spotify_auth_{user['id']}")],
        [InlineKeyboardButton("‚ùå Cancelar", callback_data=f"spotify_cancel_{user['id']}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        message,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

# ===========================
# HANDLER DE ENTRADA DE TEXTO
# ===========================

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja la entrada de texto cuando se espera configuraci√≥n"""
    logger.info(f"DEBUG: handle_text_input llamado con user_data: {context.user_data}")
    services = get_services()

    # PRIORIDAD 1: Cambio de hora de notificaci√≥n
    if 'waiting_for_time' in context.user_data:
        user_id = context.user_data['waiting_for_time']
        time_str = update.message.text.strip()

        try:
            datetime.strptime(time_str, '%H:%M')

            if user_services.set_notification_time(user_id, time_str):
                await update.message.reply_text(
                    f"‚úÖ Hora de notificaci√≥n cambiada a {time_str}",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Volver a configuraci√≥n", callback_data=f"config_back_{user_id}")
                    ]])
                )
            else:
                await update.message.reply_text("‚ùå Error al cambiar la hora.")
        except ValueError:
            await update.message.reply_text("‚ùå Formato inv√°lido. Usa HH:MM (ejemplo: 09:00)")

        del context.user_data['waiting_for_time']
        return

    # PRIORIDAD 2: A√±adir pa√≠s
    elif 'waiting_for_country_add' in context.user_data:
        user_id = context.user_data['waiting_for_country_add']
        country_input = update.message.text.strip()

        if services.get('country_state_city'):
            if len(country_input) == 2 and country_input.isalpha():
                country_code = country_input.upper()
                success = services['country_state_city'].add_user_country(user_id, country_code)
            else:
                matching_countries = services['country_state_city'].search_countries(country_input)
                if len(matching_countries) == 1:
                    success = services['country_state_city'].add_user_country(user_id, matching_countries[0]['code'])
                else:
                    await update.message.reply_text("‚ùå Pa√≠s no encontrado o ambiguo. Usa el c√≥digo de 2 letras.")
                    del context.user_data['waiting_for_country_add']
                    return

            if success:
                await update.message.reply_text(
                    f"‚úÖ Pa√≠s a√±adido correctamente",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Volver a configuraci√≥n", callback_data=f"config_back_{user_id}")
                    ]])
                )
            else:
                await update.message.reply_text("‚ùå Error al a√±adir el pa√≠s o ya lo tienes configurado.")
        else:
            await update.message.reply_text("‚ùå Sistema de pa√≠ses m√∫ltiples no disponible.")

        del context.user_data['waiting_for_country_add']
        return

    # PRIORIDAD 3: Usuario de Last.fm
    elif 'waiting_for_lastfm_user' in context.user_data:
        user_id = context.user_data['waiting_for_lastfm_user']
        lastfm_username = update.message.text.strip()

        if not lastfm_username:
            await update.message.reply_text("‚ùå Nombre de usuario no v√°lido.")
            del context.user_data['waiting_for_lastfm_user']
            return

        if not services.get('lastfm_service'):
            await update.message.reply_text("‚ùå Servicio de Last.fm no disponible.")
            del context.user_data['waiting_for_lastfm_user']
            return

        status_message = await update.message.reply_text(f"üîç Verificando usuario '{lastfm_username}'...")

        try:
            if not services['lastfm_service'].check_user_exists(lastfm_username):
                await status_message.edit_text(
                    f"‚ùå El usuario '{lastfm_username}' no existe en Last.fm.\n"
                    f"Verifica el nombre e int√©ntalo de nuevo."
                )
                del context.user_data['waiting_for_lastfm_user']
                return

            user_info = services['lastfm_service'].get_user_info(lastfm_username)

            if db.set_user_lastfm(user_id, lastfm_username, user_info):
                message = f"‚úÖ Usuario de Last.fm configurado: {lastfm_username}"
                if user_info and user_info.get('playcount', 0) > 0:
                    message += f"\nüìä Reproducciones: {user_info['playcount']:,}"

                await status_message.edit_text(
                    message,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üéµ Abrir Last.fm", callback_data=f"lastfm_menu_{user_id}")
                    ]])
                )
            else:
                await status_message.edit_text("‚ùå Error al configurar el usuario de Last.fm.")

        except Exception as e:
            logger.error(f"Error configurando usuario Last.fm: {e}")
            await status_message.edit_text("‚ùå Error verificando el usuario. Int√©ntalo de nuevo.")

        del context.user_data['waiting_for_lastfm_user']
        return

    # PRIORIDAD 4: Usuario de Spotify con c√≥digo OAuth
    elif 'waiting_for_spotify_code' in context.user_data:
        user_id = context.user_data['waiting_for_spotify_code']
        user_input = update.message.text.strip()

        if not user_input:
            await update.message.reply_text("‚ùå Entrada no v√°lida.")
            del context.user_data['waiting_for_spotify_code']
            return

        if not services.get('spotify_service'):
            await update.message.reply_text("‚ùå Servicio de Spotify no disponible.")
            del context.user_data['waiting_for_spotify_code']
            return

        status_message = await update.message.reply_text("üîÑ Procesando autorizaci√≥n...")

        try:
            authorization_code = extract_auth_code_from_input(user_input)

            if not authorization_code:
                await status_message.edit_text(
                    "‚ùå No se pudo extraer el c√≥digo de autorizaci√≥n.\n\n"
                    "Env√≠a:\n"
                    "‚Ä¢ La URL completa de redirecci√≥n\n"
                    "‚Ä¢ Solo el c√≥digo (parte despu√©s de 'code=')\n"
                    "‚Ä¢ Si la p√°gina muestra 'Authorization successful', copia todo el texto"
                )
                del context.user_data['waiting_for_spotify_code']
                return

            success, message_text, user_info = services['spotify_service'].process_authorization_code(user_id, authorization_code)

            if success:
                spotify_username = user_info.get('spotify_id', 'unknown')
                db.set_user_spotify(user_id, spotify_username, user_info)

                success_message = (
                    f"‚úÖ *¬°Autenticaci√≥n exitosa!*\n\n"
                    f"üë§ Usuario: {user_info.get('display_name', spotify_username)}\n"
                    f"üÜî ID: {spotify_username}\n"
                    f"üë• Seguidores: {user_info.get('followers', 0):,}\n"
                    f"üéµ Playlists: {user_info.get('public_playlists', 0)}\n"
                    f"üåç Pa√≠s: {user_info.get('country', 'No especificado')}\n"
                    f"üíé Tipo: {user_info.get('product', 'free').title()}\n\n"
                    f"Ahora puedes acceder a todas las funciones de Spotify."
                )

                await status_message.edit_text(
                    success_message,
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üéµ Abrir Spotify", callback_data=f"spotify_menu_{user_id}")
                    ]])
                )
            else:
                await status_message.edit_text(
                    f"‚ùå Error en autenticaci√≥n:\n{message_text}\n\n"
                    f"üí° **Consejos:**\n"
                    f"‚Ä¢ Verifica que copiaste el c√≥digo completo\n"
                    f"‚Ä¢ El c√≥digo expira en 10 minutos\n"
                    f"‚Ä¢ Intenta generar una nueva URL con `/spotify`"
                )

        except Exception as e:
            logger.error(f"Error procesando c√≥digo OAuth: {e}")
            await status_message.edit_text(
                "‚ùå Error procesando el c√≥digo.\n\n"
                "üîÑ Intenta de nuevo:\n"
                "1. Ve a `/spotify`\n"
                "2. Genera nueva URL de autorizaci√≥n\n"
                "3. Copia el c√≥digo completo"
            )

        del context.user_data['waiting_for_spotify_code']
        return

    # PRIORIDAD 5: Cambio de l√≠mites (Last.fm/Spotify)
    elif 'waiting_for_lastfm_limit' in context.user_data:
        user_id = context.user_data['waiting_for_lastfm_limit']
        limit_text = update.message.text.strip()

        try:
            limit = int(limit_text)

            if limit < 5 or limit > 10000:
                await update.message.reply_text("‚ùå El l√≠mite debe estar entre 5 y 10000 artistas.")
                del context.user_data['waiting_for_lastfm_limit']
                return

            if db.set_lastfm_sync_limit(user_id, limit):
                await update.message.reply_text(
                    f"‚úÖ L√≠mite de sincronizaci√≥n establecido a {limit} artistas.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Volver a Last.fm", callback_data=f"lastfm_menu_{user_id}")
                    ]])
                )
            else:
                await update.message.reply_text("‚ùå Error al establecer el l√≠mite.")

        except ValueError:
            await update.message.reply_text("‚ùå Debes enviar un n√∫mero v√°lido.")

        del context.user_data['waiting_for_lastfm_limit']
        return

    elif 'waiting_for_spotify_limit' in context.user_data:
        user_id = context.user_data['waiting_for_spotify_limit']
        limit_text = update.message.text.strip()

        try:
            limit = int(limit_text)

            if limit < 5 or limit > 10000:
                await update.message.reply_text("‚ùå El l√≠mite debe estar entre 5 y 10000 artistas.")
                del context.user_data['waiting_for_spotify_limit']
                return

            if db.set_spotify_artists_limit(user_id, limit):
                await update.message.reply_text(
                    f"‚úÖ L√≠mite de artistas establecido a {limit}.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Volver a Spotify", callback_data=f"spotify_menu_{user_id}")
                    ]])
                )
            else:
                await update.message.reply_text("‚ùå Error al establecer el l√≠mite.")

        except ValueError:
            await update.message.reply_text("‚ùå Debes enviar un n√∫mero v√°lido.")

        del context.user_data['waiting_for_spotify_limit']
        return


    # PRIORIDAD 4: Cambio de usuario de Last.fm
    elif 'waiting_for_lastfm_change_user' in context.user_data:
        # Procesar cambio de usuario de Last.fm
        user_id = context.user_data['waiting_for_lastfm_change_user']
        lastfm_username = update.message.text.strip()

        if not lastfm_username:
            await update.message.reply_text("‚ùå Nombre de usuario no v√°lido.")
            del context.user_data['waiting_for_lastfm_change_user']
            return

        if not lastfm_service:
            await update.message.reply_text("‚ùå Servicio de Last.fm no disponible.")
            del context.user_data['waiting_for_lastfm_change_user']
            return

        # Verificar usuario
        status_message = await update.message.reply_text(f"üîç Verificando usuario '{lastfm_username}'...")

        try:
            if not lastfm_service.check_user_exists(lastfm_username):
                await status_message.edit_text(
                    f"‚ùå El usuario '{lastfm_username}' no existe en Last.fm.\n"
                    f"Verifica el nombre e int√©ntalo de nuevo."
                )
                del context.user_data['waiting_for_lastfm_change_user']
                return

            # Obtener informaci√≥n y actualizar
            user_info = lastfm_service.get_user_info(lastfm_username)

            if db.set_user_lastfm(user_id, lastfm_username, user_info):
                message = f"‚úÖ Usuario de Last.fm actualizado: {lastfm_username}"
                if user_info and user_info.get('playcount', 0) > 0:
                    message += f"\nüìä Reproducciones: {user_info['playcount']:,}"

                await status_message.edit_text(
                    message,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Volver a Last.fm", callback_data=f"lastfm_menu_{user_id}")
                    ]])
                )
            else:
                await status_message.edit_text("‚ùå Error al actualizar el usuario de Last.fm.")

        except Exception as e:
            logger.error(f"Error actualizando usuario Last.fm: {e}")
            await status_message.edit_text("‚ùå Error verificando el usuario. Int√©ntalo de nuevo.")

        del context.user_data['waiting_for_lastfm_change_user']
        return

    # PRIORIDAD 5: L√≠mite de Last.fm
    elif 'waiting_for_lastfm_limit' in context.user_data:
        # Procesar nuevo l√≠mite de Last.fm
        user_id = context.user_data['waiting_for_lastfm_limit']
        limit_text = update.message.text.strip()

        try:
            limit = int(limit_text)

            if limit < 5 or limit > 10000:
                await update.message.reply_text("‚ùå El l√≠mite debe estar entre 5 y 10000 artistas.")
                del context.user_data['waiting_for_lastfm_limit']
                return

            if db.set_lastfm_sync_limit(user_id, limit):
                await update.message.reply_text(
                    f"‚úÖ L√≠mite de sincronizaci√≥n establecido a {limit} artistas.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Volver a Last.fm", callback_data=f"lastfm_menu_{user_id}")
                    ]])
                )
            else:
                await update.message.reply_text("‚ùå Error al establecer el l√≠mite.")

        except ValueError:
            await update.message.reply_text("‚ùå Debes enviar un n√∫mero v√°lido.")

        del context.user_data['waiting_for_lastfm_limit']
        return

    # PRIORIDAD 6: A√±adir artista
    elif 'waiting_for_artist_add' in context.user_data:
        user_id = context.user_data['waiting_for_artist_add']
        artist_name = update.message.text.strip()

        if not artist_name:
            await update.message.reply_text("‚ùå Nombre de artista no v√°lido.")
            del context.user_data['waiting_for_artist_add']
            return

        # Simular el comando addartist
        fake_context = type('obj', (object,), {
            'args': artist_name.split(),
            'user_data': context.user_data
        })()

        fake_update = type('obj', (object,), {
            'effective_chat': type('obj', (object,), {'id': update.effective_chat.id})(),
            'message': update.message
        })()

        # Limpiar el estado antes de llamar a addartist
        del context.user_data['waiting_for_artist_add']

        # Llamar al comando addartist existente
        await addartist_command(fake_update, fake_context)
        return


# PRIORIDAD: Usuario de Spotify
    elif 'waiting_for_spotify_user' in context.user_data:
        # Procesar nuevo usuario de Spotify
        user_id = context.user_data['waiting_for_spotify_user']
        spotify_username = update.message.text.strip()

        if not spotify_username:
            await update.message.reply_text("‚ùå Nombre de usuario no v√°lido.")
            del context.user_data['waiting_for_spotify_user']
            return

        # Verificar que el servicio est√© disponible
        if not spotify_service:
            await update.message.reply_text("‚ùå Servicio de Spotify no disponible.")
            del context.user_data['waiting_for_spotify_user']
            return

        # Verificar que el usuario existe en Spotify
        status_message = await update.message.reply_text(f"üîç Verificando usuario '{spotify_username}'...")

        try:
            if not spotify_service.check_user_exists(spotify_username):
                await status_message.edit_text(
                    f"‚ùå El usuario '{spotify_username}' no existe en Spotify.\n"
                    f"Verifica el nombre e int√©ntalo de nuevo."
                )
                del context.user_data['waiting_for_spotify_user']
                return

            # Obtener informaci√≥n del usuario
            user_info = spotify_service.get_user_info(spotify_username)

            # Obtener n√∫mero de playlists
            playlists_count = spotify_service.get_user_playlists_count(spotify_username)
            if user_info:
                user_info['public_playlists'] = playlists_count

            # Guardar en base de datos
            if db.set_user_spotify(user_id, spotify_username, user_info):
                message = f"‚úÖ Usuario de Spotify configurado: {spotify_username}"
                if user_info:
                    display_name = user_info.get('display_name', spotify_username)
                    followers = user_info.get('followers', 0)
                    if display_name != spotify_username:
                        message += f" ({display_name})"
                    message += f"\nüë• Seguidores: {followers:,}"
                    message += f"\nüéµ Playlists: {playlists_count}"

                await status_message.edit_text(
                    message,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üéµ Abrir Spotify", callback_data=f"spotify_menu_{user_id}")
                    ]])
                )
            else:
                await status_message.edit_text("‚ùå Error al configurar el usuario de Spotify.")

        except Exception as e:
            logger.error(f"Error configurando usuario Spotify: {e}")
            await status_message.edit_text("‚ùå Error verificando el usuario. Int√©ntalo de nuevo.")

        del context.user_data['waiting_for_spotify_user']
        return

    # PRIORIDAD: Cambio de usuario de Spotify
    elif 'waiting_for_spotify_change_user' in context.user_data:
        # Procesar cambio de usuario de Spotify
        user_id = context.user_data['waiting_for_spotify_change_user']
        spotify_username = update.message.text.strip()

        if not spotify_username:
            await update.message.reply_text("‚ùå Nombre de usuario no v√°lido.")
            del context.user_data['waiting_for_spotify_change_user']
            return

        if not spotify_service:
            await update.message.reply_text("‚ùå Servicio de Spotify no disponible.")
            del context.user_data['waiting_for_spotify_change_user']
            return

        # Verificar usuario
        status_message = await update.message.reply_text(f"üîç Verificando usuario '{spotify_username}'...")

        try:
            if not spotify_service.check_user_exists(spotify_username):
                await status_message.edit_text(
                    f"‚ùå El usuario '{spotify_username}' no existe en Spotify.\n"
                    f"Verifica el nombre e int√©ntalo de nuevo."
                )
                del context.user_data['waiting_for_spotify_change_user']
                return

            # Obtener informaci√≥n y actualizar
            user_info = spotify_service.get_user_info(spotify_username)
            playlists_count = spotify_service.get_user_playlists_count(spotify_username)
            if user_info:
                user_info['public_playlists'] = playlists_count

            if db.set_user_spotify(user_id, spotify_username, user_info):
                message = f"‚úÖ Usuario de Spotify actualizado: {spotify_username}"
                if user_info:
                    display_name = user_info.get('display_name', spotify_username)
                    followers = user_info.get('followers', 0)
                    if display_name != spotify_username:
                        message += f" ({display_name})"
                    message += f"\nüë• Seguidores: {followers:,}"
                    message += f"\nüéµ Playlists: {playlists_count}"

                await status_message.edit_text(
                    message,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Volver a Spotify", callback_data=f"spotify_menu_{user_id}")
                    ]])
                )
            else:
                await status_message.edit_text("‚ùå Error al actualizar el usuario de Spotify.")

        except Exception as e:
            logger.error(f"Error actualizando usuario Spotify: {e}")
            await status_message.edit_text("‚ùå Error verificando el usuario. Int√©ntalo de nuevo.")

        del context.user_data['waiting_for_spotify_change_user']
        return

    # PRIORIDAD: L√≠mite de Spotify
    elif 'waiting_for_spotify_limit' in context.user_data:
        user_id = context.user_data['waiting_for_spotify_limit']
        limit_text = update.message.text.strip()

        try:
            limit = int(limit_text)

            if limit < 5 or limit > 10000:
                await update.message.reply_text("‚ùå El l√≠mite debe estar entre 5 y 10000 artistas.")
                del context.user_data['waiting_for_spotify_limit']
                return

            if db.set_spotify_artists_limit(user_id, limit):
                await update.message.reply_text(
                    f"‚úÖ L√≠mite de artistas establecido a {limit}.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô Volver a Spotify", callback_data=f"spotify_menu_{user_id}")
                    ]])
                )
            else:
                await update.message.reply_text("‚ùå Error al establecer el l√≠mite.")

        except ValueError:
            await update.message.reply_text("‚ùå Debes enviar un n√∫mero v√°lido.")

        del context.user_data['waiting_for_spotify_limit']
        return


    # PRIORIDAD M√ÅXIMA: C√≥digo de autorizaci√≥n OAuth de Spotify
    elif 'waiting_for_spotify_code' in context.user_data:
        # Procesar c√≥digo de autorizaci√≥n OAuth
        user_id = context.user_data['waiting_for_spotify_code']
        user_input = update.message.text.strip()

        logger.info(f"DEBUG: Procesando input OAuth: {user_input[:20]}...")

        if not user_input:
            await update.message.reply_text("‚ùå Entrada no v√°lida.")
            del context.user_data['waiting_for_spotify_code']
            return

        # Verificar que el servicio est√© disponible
        if not spotify_service:
            await update.message.reply_text("‚ùå Servicio de Spotify no disponible.")
            del context.user_data['waiting_for_spotify_code']
            return

        # Procesar input - puede ser c√≥digo o URL completa
        status_message = await update.message.reply_text("üîÑ Procesando autorizaci√≥n...")

        try:
            # Extraer c√≥digo de diferentes formatos posibles
            authorization_code = extract_auth_code_from_input(user_input)

            if not authorization_code:
                await status_message.edit_text(
                    "‚ùå No se pudo extraer el c√≥digo de autorizaci√≥n.\n\n"
                    "Env√≠a:\n"
                    "‚Ä¢ La URL completa de redirecci√≥n\n"
                    "‚Ä¢ Solo el c√≥digo (parte despu√©s de 'code=')\n"
                    "‚Ä¢ Si la p√°gina muestra 'Authorization successful', copia todo el texto"
                )
                del context.user_data['waiting_for_spotify_code']
                return

            success, message_text, user_info = spotify_service.process_authorization_code(user_id, authorization_code)

            if success:
                # Actualizar informaci√≥n en base de datos
                spotify_username = user_info.get('spotify_id', 'unknown')
                db.set_user_spotify(user_id, spotify_username, user_info)

                success_message = (
                    f"‚úÖ *¬°Autenticaci√≥n exitosa!*\n\n"
                    f"üë§ Usuario: {user_info.get('display_name', spotify_username)}\n"
                    f"üÜî ID: {spotify_username}\n"
                    f"üë• Seguidores: {user_info.get('followers', 0):,}\n"
                    f"üéµ Playlists: {user_info.get('public_playlists', 0)}\n"
                    f"üåç Pa√≠s: {user_info.get('country', 'No especificado')}\n"
                    f"üíé Tipo: {user_info.get('product', 'free').title()}\n\n"
                    f"Ahora puedes acceder a todas las funciones de Spotify."
                )

                await status_message.edit_text(
                    success_message,
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üéµ Abrir Spotify", callback_data=f"spotify_menu_{user_id}")
                    ]])
                )
            else:
                await status_message.edit_text(
                    f"‚ùå Error en autenticaci√≥n:\n{message_text}\n\n"
                    f"üí° **Consejos:**\n"
                    f"‚Ä¢ Verifica que copiaste el c√≥digo completo\n"
                    f"‚Ä¢ El c√≥digo expira en 10 minutos\n"
                    f"‚Ä¢ Intenta generar una nueva URL con `/spotify`"
                )

        except Exception as e:
            logger.error(f"Error procesando c√≥digo OAuth: {e}")
            await status_message.edit_text(
                "‚ùå Error procesando el c√≥digo.\n\n"
                "üîÑ Intenta de nuevo:\n"
                "1. Ve a `/spotify`\n"
                "2. Genera nueva URL de autorizaci√≥n\n"
                "3. Copia el c√≥digo completo"
            )

        del context.user_data['waiting_for_spotify_code']
        return

    # Si no hay nada esperado, no hacer nada
    else:
        print(f"DEBUG: No hay handlers esperando input, user_data: {context.user_data}")  # DEBUG temporal



# ===========================
# FUNCIONES AUXILIARES ESPEC√çFICAS
# ===========================

async def show_notifications_menu(query, user: Dict):
    """Muestra el submen√∫ de notificaciones"""
    status = "‚úÖ Activadas" if user['notification_enabled'] else "‚ùå Desactivadas"

    message = (
        f"üîî *Gesti√≥n de Notificaciones*\n\n"
        f"Estado actual: {status}\n"
        f"Hora actual: {user['notification_time']}\n\n"
        f"Selecciona una opci√≥n:"
    )

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ Activar", callback_data=f"notif_on_{user['id']}"),
            InlineKeyboardButton("‚ùå Desactivar", callback_data=f"notif_off_{user['id']}")
        ],
        [
            InlineKeyboardButton("‚è∞ Cambiar hora", callback_data=f"notif_time_{user['id']}")
        ],
        [
            InlineKeyboardButton("üîô Volver", callback_data=f"config_back_{user['id']}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        message,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def show_countries_menu(query, user: Dict, services: Dict):
    """Muestra el submen√∫ de pa√≠ses"""
    if services.get('country_state_city'):
        user_countries = services['country_state_city'].get_user_countries(user['id'])
        if user_countries:
            countries_text = "\n".join([f"‚Ä¢ {c['name']} ({c['code']})" for c in user_countries])
        else:
            countries_text = "Ning√∫n pa√≠s configurado"
    else:
        user_services_config = user_services.get_user_services(user['id'])
        countries_text = f"‚Ä¢ {user_services_config.get('country_filter', 'ES')} (sistema legacy)"

    message = (
        f"üåç *Gesti√≥n de Pa√≠ses*\n\n"
        f"Pa√≠ses actuales:\n{countries_text}\n\n"
        f"Selecciona una opci√≥n:"
    )

    keyboard = [
        [
            InlineKeyboardButton("‚ûï A√±adir pa√≠s", callback_data=f"country_add_{user['id']}"),
            InlineKeyboardButton("‚ûñ Eliminar pa√≠s", callback_data=f"country_remove_{user['id']}")
        ],
        [
            InlineKeyboardButton("üìã Ver disponibles", callback_data=f"country_list_{user['id']}")
        ],
        [
            InlineKeyboardButton("üîô Volver", callback_data=f"config_back_{user['id']}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        message,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def show_services_menu(query, user: Dict):
    """Muestra el submen√∫ de servicios"""
    user_services_config = user_services.get_user_services(user['id'])

    services_status = []
    for service in ['ticketmaster', 'spotify', 'setlistfm']:
        status = "‚úÖ" if user_services_config.get(service, True) else "‚ùå"
        services_status.append(f"{status} {service.capitalize()}")

    message = (
        f"üîß *Gesti√≥n de Servicios*\n\n"
        f"Estado actual:\n" + "\n".join(services_status) + "\n\n"
        f"Selecciona una opci√≥n:"
    )

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ Activar servicio", callback_data=f"service_activate_{user['id']}"),
            InlineKeyboardButton("‚ùå Desactivar servicio", callback_data=f"service_deactivate_{user['id']}")
        ],
        [
            InlineKeyboardButton("üîô Volver", callback_data=f"config_back_{user['id']}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        message,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def show_artists_menu(query, user: Dict):
    """Muestra el submen√∫ de artistas (equivalente a /list)"""
    followed_artists = db.get_user_followed_artists(user['id'])

    if not followed_artists:
        message = (
            f"üéµ *Artistas seguidos*\n\n"
            f"No tienes artistas seguidos a√∫n.\n"
            f"Usa el bot√≥n de abajo para a√±adir artistas."
        )
    else:
        message_lines = [f"üéµ *Artistas seguidos* ({len(followed_artists)})\n"]

        # Mostrar solo los primeros 10 para no sobrecargar
        for i, artist in enumerate(followed_artists[:10], 1):
            line = f"{i}. *{artist['name']}*"

            details = []
            if artist['country']:
                details.append(f"üåç {artist['country']}")
            if artist['formed_year']:
                details.append(f"üìÖ {artist['formed_year']}")

            if details:
                line += f" ({', '.join(details)})"

            message_lines.append(line)

        if len(followed_artists) > 10:
            message_lines.append(f"_...y {len(followed_artists) - 10} m√°s_")

        message_lines.append(f"\nUsa `/list` para ver la lista completa con enlaces.")
        message = "\n".join(message_lines)

    keyboard = [
        [
            InlineKeyboardButton("‚ûï A√±adir artista", callback_data=f"artist_add_{user['id']}"),
            InlineKeyboardButton("üîç Buscar conciertos", callback_data=f"artist_search_{user['id']}")
        ],
        [
            InlineKeyboardButton("üîô Volver", callback_data=f"config_back_{user['id']}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        message,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

# ===========================
# FUNCI√ìN PRINCIPAL
# ===========================



def filter_future_concerts_by_countries(all_concerts, user_countries, database_path=None):
    """
    Filtra conciertos futuros por pa√≠ses del usuario
    VERSI√ìN CORREGIDA: Acepta database_path como par√°metro
    """
    from user_services import get_services
    from datetime import datetime

    services = get_services()
    today = datetime.now().date()
    future_concerts = []

    # Primero filtrar por fecha (solo futuros)
    for concert in all_concerts:
        concert_date = concert.get('date', '')
        if concert_date and len(concert_date) >= 10:
            try:
                concert_date_obj = datetime.strptime(concert_date[:10], '%Y-%m-%d').date()
                if concert_date_obj >= today:
                    future_concerts.append(concert)
            except ValueError:
                # Si no se puede parsear la fecha, incluir el concierto
                future_concerts.append(concert)
        else:
            # Si no hay fecha, incluir el concierto
            future_concerts.append(concert)

    # Luego filtrar por pa√≠ses del usuario
    filtered_concerts = []

    if services.get('country_state_city') and database_path:
        try:
            from apis.country_state_city import ArtistTrackerDatabaseExtended
            extended_db = ArtistTrackerDatabaseExtended(database_path, services['country_state_city'])
            filtered_concerts = extended_db.filter_concerts_by_countries(future_concerts, user_countries)
            logger.debug(f"Filtrado avanzado: {len(future_concerts)} -> {len(filtered_concerts)} conciertos")

        except Exception as e:
            logger.error(f"Error filtrando conciertos por pa√≠ses: {e}")
            # Fallback a filtrado b√°sico
            filtered_concerts = _basic_country_filter(future_concerts, user_countries)
    else:
        # Filtrado b√°sico si no hay servicio de pa√≠ses
        filtered_concerts = _basic_country_filter(future_concerts, user_countries)

    return filtered_concerts


def _basic_country_filter(concerts, user_countries):
    """Filtrado b√°sico por c√≥digo de pa√≠s"""
    filtered_concerts = []

    for concert in concerts:
        concert_country = concert.get('country_code', concert.get('country', '')).upper()

        # Si no hay informaci√≥n de pa√≠s O el pa√≠s est√° en la lista del usuario, incluir
        if not concert_country or concert_country in user_countries:
            filtered_concerts.append(concert)

    logger.debug(f"Filtrado b√°sico: {len(concerts)} -> {len(filtered_concerts)} conciertos")
    return filtered_concerts

def get_no_concerts_suggestions(is_search, countries_text):
    """Obtiene sugerencias cuando no se encuentran conciertos"""
    if is_search:
        return (
            "üí° Sugerencias:\n"
            f"‚Ä¢ Usa `/show` para ver conciertos ya guardados\n"
            f"‚Ä¢ Usa `/addcountry <pa√≠s>` para a√±adir m√°s pa√≠ses\n"
            f"‚Ä¢ Algunos conciertos pueden anunciarse m√°s cerca de las fechas"
        )
    else:
        return (
            "üí° Sugerencias:\n"
            f"‚Ä¢ Usa `/addcountry <pa√≠s>` para a√±adir m√°s pa√≠ses\n"
            f"‚Ä¢ Usa `/search` para buscar nuevos conciertos\n"
            f"‚Ä¢ Usa `/searchartist <nombre>` para buscar conciertos de un artista espec√≠fico"
        )


async def searchartist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /searchartist - b√∫squeda espec√≠fica de un artista"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå Uso incorrecto. Debes especificar el nombre del artista.\n"
            "Ejemplo: `/searchartist Metallica`"
        )
        return

    artist_name = " ".join(context.args)
    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado para usar su configuraci√≥n
    user = db.get_user_by_chat_id(chat_id)
    user_services_config = None

    if user:
        user_services_config = user_services.get_user_services(user['id'])

        # Verificar que tenga al menos un servicio activo
        active_services = [s for s, active in user_services_config.items() if active and s not in ['country_filter', 'countries']]
        if not active_services:
            await update.message.reply_text(
                "‚ùå No tienes ning√∫n servicio de b√∫squeda activo.\n"
                "Usa `/serviceon <servicio>` para activar al menos uno.\n"
                "Servicios disponibles: ticketmaster, spotify, setlistfm"
            )
            return

        # Verificar que tenga pa√≠ses configurados
        user_countries = user_services_config.get('countries', set())
        if not user_countries:
            await update.message.reply_text(
                "‚ùå No tienes pa√≠ses configurados.\n"
                "Usa `/addcountry <pa√≠s>` para a√±adir pa√≠ses.\n"
                "Ejemplo: `/addcountry ES`"
            )
            return

        services_text = ", ".join(active_services)
        countries_text = ", ".join(sorted(user_countries))
        status_message = await update.message.reply_text(
            f"üîç Buscando conciertos para '{artist_name}'...\n"
            f"üîß Servicios activos: {services_text}\n"
            f"üåç Pa√≠ses: {countries_text}"
        )
    else:
        # Usuario no registrado - usar configuraci√≥n por defecto
        status_message = await update.message.reply_text(
            f"üîç Buscando conciertos para '{artist_name}'...\n"
            f"(Usando configuraci√≥n por defecto. Reg√≠strate con `/adduser` para personalizar)"
        )

    try:
        # Buscar conciertos para el artista
        services = get_services()
        concerts = await search_concerts_for_artist(
            artist_name,
            user_services_config,
            user_id=user['id'] if user else None,
            services=services,
            database=db
        )

        if not concerts:
            country_info = f" en tus pa√≠ses configurados" if user else ""
            await status_message.edit_text(
                f"üì≠ No se encontraron conciertos para '{artist_name}'{country_info}.\n"
                "Verifica la ortograf√≠a e int√©ntalo de nuevo."
            )
            return

        # Guardar conciertos en la base de datos
        for concert in concerts:
            db.save_concert(concert)

        # Formatear mensaje usando el nuevo formato
        message = format_single_artist_concerts_complete(
            concerts,
            artist_name,
            show_notified=False
        )

        # Dividir en chunks si es muy largo
        if len(message) > 4000:
            chunks = split_long_message(message, max_length=4000)

            # Editar mensaje original con el primer chunk
            await status_message.edit_text(
                chunks[0],
                parse_mode='Markdown',
                disable_web_page_preview=True
            )

            # Enviar chunks adicionales
            for chunk in chunks[1:]:
                await update.message.reply_text(
                    chunk,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
        else:
            await status_message.edit_text(
                message,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )

    except Exception as e:
        logger.error(f"Error en comando searchartist: {e}")
        await status_message.edit_text(
            f"‚ùå Error al buscar conciertos para '{artist_name}'. Int√©ntalo de nuevo m√°s tarde."
        )

async def showartist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /showartist - muestra conciertos futuros de un artista filtrados por pa√≠ses del usuario"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå Uso incorrecto. Debes especificar el nombre del artista.\n"
            "Ejemplo: `/showartist Radiohead`"
        )
        return

    artist_name = " ".join(context.args)
    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    # Obtener configuraci√≥n de pa√≠ses del usuario
    user_services_config = user_services.get_user_services(user['id'])
    if not user_services_config:
        user_services_config = {'countries': {'ES'}, 'country_filter': 'ES'}

    user_countries = user_services_config.get('countries', set())
    if not user_countries:
        country_filter = user_services_config.get('country_filter', 'ES')
        user_countries = {country_filter}

    # Obtener TODOS los conciertos del artista de la base de datos
    conn = db.get_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT DISTINCT c.*
            FROM concerts c
            WHERE LOWER(c.artist_name) = LOWER(?)
            ORDER BY c.date ASC
        """, (artist_name,))

        rows = cursor.fetchall()
        all_artist_concerts = [dict(row) for row in rows]
    except Exception as e:
        logger.error(f"Error obteniendo conciertos de {artist_name}: {e}")
        all_artist_concerts = []
    finally:
        conn.close()

    if not all_artist_concerts:
        await update.message.reply_text(
            f"üì≠ No se encontraron conciertos para '{artist_name}' en la base de datos.\n"
            f"üí° Sugerencias:\n"
            f"‚Ä¢ Verifica la ortograf√≠a del nombre\n"
            f"‚Ä¢ Usa `/addartist {artist_name}` para seguir al artista\n"
            f"‚Ä¢ Usa `/searchartist {artist_name}` para buscar nuevos conciertos"
        )
        return

    # Filtrar solo conciertos futuros y por pa√≠ses
    filtered_concerts = filter_future_concerts_by_countries(all_artist_concerts, user_countries)

    # Verificar si el usuario sigue a este artista
    followed_artists = db.get_user_followed_artists(user['id'])
    is_following = any(artist['name'].lower() == artist_name.lower() for artist in followed_artists)

    # Mensaje de informaci√≥n inicial
    countries_text = ", ".join(sorted(user_countries))
    info_message = f"üéµ Conciertos de *{artist_name}*\n"
    info_message += f"üåç Mostrando pa√≠ses: {countries_text}\n"
    info_message += f"üìä {len(filtered_concerts)} de {len(all_artist_concerts)} conciertos\n"

    if not is_following:
        info_message += f"üí° Usa `/addartist {artist_name}` para seguir y recibir notificaciones\n"

    info_message += "‚îÄ" * 30

    # Mostrar primero los conciertos filtrados por pa√≠ses
    if not filtered_concerts:
        # No hay conciertos en los pa√≠ses del usuario
        no_concerts_message = (
            f"üì≠ *{artist_name}* no tiene conciertos futuros en tus pa√≠ses ({countries_text})\n\n"
            f"üìä Pero tiene {len(all_artist_concerts)} conciertos en la base de datos\n\n"
            f"üí° Usa `/addcountry <pa√≠s>` para a√±adir m√°s pa√≠ses\n"
            f"üí° Usa `/searchartist {artist_name}` para buscar nuevos conciertos"
        )

        await update.message.reply_text(
            no_concerts_message,
            parse_mode='Markdown'
        )
    else:
        # Hay conciertos en los pa√≠ses del usuario
        await update.message.reply_text(info_message, parse_mode='Markdown')

        # Usar la funci√≥n mejorada que filtra conciertos futuros autom√°ticamente
        message = format_single_artist_concerts_complete(
            filtered_concerts,
            artist_name,
            show_notified=is_following
        )

        # Dividir en chunks si es muy largo
        if len(message) > 4000:
            chunks = split_long_message(message)

            # Enviar el primer chunk
            await update.message.reply_text(
                chunks[0],
                parse_mode='Markdown',
                disable_web_page_preview=True
            )

            # Enviar chunks adicionales con pausa
            for chunk in chunks[1:]:
                await asyncio.sleep(0.5)
                await update.message.reply_text(
                    chunk,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
        else:
            await update.message.reply_text(
                message,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )

# ===========================
# COMANDOS DE SERVICIOS
# ===========================

async def serviceon_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /serviceon para activar un servicio"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå Uso incorrecto. Debes especificar el servicio.\n"
            "Ejemplo: `/serviceon ticketmaster`\n"
            "Servicios disponibles: ticketmaster, spotify, setlistfm"
        )
        return

    service = context.args[0].lower()
    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    # Validar servicio
    valid_services = ['ticketmaster', 'spotify', 'setlistfm']
    if service not in valid_services:
        await update.message.reply_text(
            f"‚ùå Servicio '{service}' no v√°lido.\n"
            f"Servicios disponibles: {', '.join(valid_services)}"
        )
        return

    # Activar servicio
    if user_services.set_service_status(user['id'], service, True):
        await update.message.reply_text(
            f"‚úÖ Servicio '{service}' activado correctamente.\n"
            f"Usa `/config` para ver tu configuraci√≥n actual."
        )
    else:
        await update.message.reply_text(
            f"‚ùå Error al activar el servicio '{service}'."
        )

async def serviceoff_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /serviceoff para desactivar un servicio"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå Uso incorrecto. Debes especificar el servicio.\n"
            "Ejemplo: `/serviceoff spotify`\n"
            "Servicios disponibles: ticketmaster, spotify, setlistfm"
        )
        return

    service = context.args[0].lower()
    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    # Validar servicio
    valid_services = ['ticketmaster', 'spotify', 'setlistfm']
    if service not in valid_services:
        await update.message.reply_text(
            f"‚ùå Servicio '{service}' no v√°lido.\n"
            f"Servicios disponibles: {', '.join(valid_services)}"
        )
        return

    # Verificar que no sea el √∫ltimo servicio activo
    user_services_config = user_services.get_user_services(user['id'])
    active_services = [s for s, active in user_services_config.items() if active and s not in ['country_filter', 'countries']]

    if len(active_services) == 1 and user_services_config.get(service, False):
        await update.message.reply_text(
            f"‚ùå No puedes desactivar '{service}' porque es el √∫nico servicio activo.\n"
            f"Activa otro servicio primero con `/serviceon <servicio>`."
        )
        return

    # Desactivar servicio
    if user_services.set_service_status(user['id'], service, False):
        await update.message.reply_text(
            f"‚úÖ Servicio '{service}' desactivado correctamente.\n"
            f"Usa `/config` para ver tu configuraci√≥n actual."
        )
    else:
        await update.message.reply_text(
            f"‚ùå Error al desactivar el servicio '{service}'."
        )

# ===========================
# COMANDOS DE PA√çSES
# ===========================

async def country_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /country - VERSI√ìN LEGACY con redirecci√≥n al nuevo sistema"""
    services = get_services()

    if not context.args:
        message = (
            "‚ùå Uso incorrecto. Debes especificar el c√≥digo de pa√≠s.\n"
            "Ejemplo: `/country ES`\n\n"
        )

        if services.get('country_state_city'):
            message += (
                "üí° *Nuevo sistema disponible:*\n"
                "Ahora puedes tener m√∫ltiples pa√≠ses configurados:\n"
                "`/addcountry <pa√≠s>` - A√±adir pa√≠s\n"
                "`/mycountries` - Ver pa√≠ses configurados\n"
                "`/listcountries` - Ver pa√≠ses disponibles"
            )
        else:
            message += "C√≥digos comunes: ES, US, FR, DE, IT, UK"

        await update.message.reply_text(message, parse_mode='Markdown')
        return

    country_code = context.args[0].upper()
    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    # Validar formato del c√≥digo de pa√≠s
    if len(country_code) < 2 or len(country_code) > 3 or not country_code.isalpha():
        await update.message.reply_text(
            "‚ùå C√≥digo de pa√≠s inv√°lido. Debe tener 2-3 letras.\n"
            "Ejemplos: ES, US, FR, DE, IT, UK"
        )
        return

    if services.get('country_state_city'):
        # Usar nuevo sistema
        await update.message.reply_text(
            f"üîÑ Configurando pa√≠s usando el nuevo sistema...\n"
            f"Esto reemplazar√° tu configuraci√≥n actual de pa√≠ses."
        )

        # Limpiar pa√≠ses existentes
        user_countries = services['country_state_city'].get_user_countries(user['id'])
        for country in user_countries:
            services['country_state_city'].remove_user_country(user['id'], country['code'])

        # A√±adir nuevo pa√≠s
        success = services['country_state_city'].add_user_country(user['id'], country_code)

        if success:
            country_info = services['country_state_city'].get_country_info(country_code)
            country_name = country_info['name'] if country_info else country_code

            await update.message.reply_text(
                f"‚úÖ Pa√≠s configurado: {country_name} ({country_code})\n\n"
                f"üí° Ahora puedes a√±adir m√°s pa√≠ses con `/addcountry`\n"
                f"Usa `/mycountries` para ver tu configuraci√≥n."
            )
        else:
            await update.message.reply_text(
                f"‚ùå Error configurando el pa√≠s {country_code}.\n"
                f"Verifica que el c√≥digo sea v√°lido."
            )
    else:
        # Usar sistema legacy
        if user_services.set_country_filter(user['id'], country_code):
            await update.message.reply_text(
                f"‚úÖ Filtro de pa√≠s establecido a '{country_code}'.\n"
                f"Usa `/config` para ver tu configuraci√≥n actual."
            )
        else:
            await update.message.reply_text(
                f"‚ùå Error al establecer el filtro de pa√≠s."
            )


async def addcountry_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /addcountry - a√±ade un pa√≠s a la configuraci√≥n del usuario"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå Uso incorrecto. Debes especificar el c√≥digo o nombre del pa√≠s.\n"
            "Ejemplo: `/addcountry ES` o `/addcountry Spain`\n"
            "Usa `/listcountries` para ver pa√≠ses disponibles"
        )
        return

    if not country_state_city:
        await update.message.reply_text(
            "‚ùå Servicio de pa√≠ses no disponible.\n"
            "Contacta al administrador para configurar la API key."
        )
        return

    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    query = " ".join(context.args)

    # Mensaje de estado
    status_message = await update.message.reply_text(
        f"üîç Buscando pa√≠s: '{query}'..."
    )

    try:
        # Si es un c√≥digo de 2 letras, usarlo directamente
        if len(query) == 2 and query.isalpha():
            country_code = query.upper()

            # Verificar que existe
            country_info = country_state_city.get_country_info(country_code)
            if not country_info:
                # Intentar obtener pa√≠ses actualizados
                countries = country_state_city.get_available_countries(force_refresh=True)
                country_info = country_state_city.get_country_info(country_code)

            if country_info:
                selected_country = country_info
            else:
                await status_message.edit_text(
                    f"‚ùå Pa√≠s con c√≥digo '{country_code}' no encontrado.\n"
                    f"Usa `/listcountries` para ver pa√≠ses disponibles."
                )
                return
        else:
            # Buscar por nombre
            matching_countries = country_state_city.search_countries(query)

            if not matching_countries:
                await status_message.edit_text(
                    f"‚ùå No se encontraron pa√≠ses que coincidan con '{query}'.\n"
                    f"Usa `/listcountries` para ver pa√≠ses disponibles."
                )
                return
            elif len(matching_countries) == 1:
                selected_country = matching_countries[0]
            else:
                # M√∫ltiples coincidencias - mostrar opciones
                await show_country_selection(update, matching_countries, query, status_message)
                return

        # A√±adir pa√≠s
        await status_message.edit_text(
            f"‚è≥ A√±adiendo pa√≠s {selected_country['name']} ({selected_country['code']})...\n"
            f"Esto puede tardar un momento mientras obtenemos las ciudades..."
        )

        success = country_state_city.add_user_country(user['id'], selected_country['code'])

        if success:
            # Obtener estad√≠sticas
            cities = country_state_city.get_country_cities(selected_country['code'])
            user_countries = country_state_city.get_user_countries(user['id'])

            await status_message.edit_text(
                f"‚úÖ Pa√≠s a√±adido: {selected_country['name']} ({selected_country['code']})\n"
                f"üèôÔ∏è {len(cities)} ciudades cargadas\n"
                f"üåç Total pa√≠ses configurados: {len(user_countries)}\n\n"
                f"Usa `/mycountries` para ver tu configuraci√≥n actual."
            )
        else:
            await status_message.edit_text(
                f"‚ùå Error a√±adiendo el pa√≠s {selected_country['name']}.\n"
                f"Es posible que ya lo tengas configurado."
            )

    except Exception as e:
        logger.error(f"Error en comando addcountry: {e}")
        await status_message.edit_text(
            "‚ùå Error al a√±adir el pa√≠s. Int√©ntalo de nuevo m√°s tarde."
        )


async def removecountry_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /removecountry - elimina un pa√≠s de la configuraci√≥n del usuario"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå Uso incorrecto. Debes especificar el c√≥digo del pa√≠s.\n"
            "Ejemplo: `/removecountry ES`\n"
            "Usa `/mycountries` para ver tus pa√≠ses configurados"
        )
        return

    if not country_state_city:
        await update.message.reply_text(
            "‚ùå Servicio de pa√≠ses no disponible."
        )
        return

    chat_id = update.effective_chat.id
    country_code = context.args[0].upper()

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    # Verificar que el usuario tenga m√°s de un pa√≠s (no puede quedarse sin pa√≠ses)
    user_countries = country_state_city.get_user_countries(user['id'])
    if len(user_countries) <= 1:
        await update.message.reply_text(
            "‚ùå No puedes eliminar tu √∫ltimo pa√≠s configurado.\n"
            "A√±ade otro pa√≠s primero con `/addcountry`"
        )
        return

    # Eliminar pa√≠s
    success = country_state_city.remove_user_country(user['id'], country_code)

    if success:
        country_info = country_state_city.get_country_info(country_code)
        country_name = country_info['name'] if country_info else country_code

        remaining_countries = country_state_city.get_user_countries(user['id'])

        await update.message.reply_text(
            f"‚úÖ Pa√≠s eliminado: {country_name} ({country_code})\n"
            f"üåç Pa√≠ses restantes: {len(remaining_countries)}\n\n"
            f"Usa `/mycountries` para ver tu configuraci√≥n actual."
        )
    else:
        await update.message.reply_text(
            f"‚ùå No ten√≠as el pa√≠s '{country_code}' configurado."
        )


async def mycountries_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /mycountries - muestra pa√≠ses configurados del usuario"""
    if not country_state_city:
        await update.message.reply_text(
            "‚ùå Servicio de pa√≠ses no disponible."
        )
        return

    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    # Obtener pa√≠ses del usuario
    user_countries = country_state_city.get_user_countries(user['id'])

    if not user_countries:
        await update.message.reply_text(
            "üì≠ No tienes pa√≠ses configurados.\n"
            "Usa `/addcountry <pa√≠s>` para a√±adir pa√≠ses.\n"
            "Ejemplo: `/addcountry ES`"
        )
        return

    # Formatear mensaje
    message_lines = [f"üåç *Pa√≠ses configurados para {user['username']}:*\n"]

    for i, country in enumerate(user_countries, 1):
        line = f"{i}. *{country['name']}* ({country['code']})"

        details = []
        if country.get('currency'):
            details.append(f"üí∞ {country['currency']}")
        if country.get('phone_code'):
            details.append(f"üìû +{country['phone_code']}")

        if details:
            line += f" - {' | '.join(details)}"

        message_lines.append(line)

    message_lines.append(f"\nüìä Total: {len(user_countries)} pa√≠ses")
    message_lines.append("\nüí° *Comandos √∫tiles:*")
    message_lines.append("`/addcountry <pa√≠s>` - A√±adir pa√≠s")
    message_lines.append("`/removecountry <c√≥digo>` - Eliminar pa√≠s")
    message_lines.append("`/listcountries` - Ver pa√≠ses disponibles")

    response = "\n".join(message_lines)

    try:
        await update.message.reply_text(
            response,
            parse_mode='Markdown'
        )
    except Exception as e:
        # Si hay error con Markdown, enviar sin formato
        logger.warning(f"Error con Markdown en mycountries, enviando texto plano: {e}")
        plain_response = response.replace('*', '').replace('`', '')
        await update.message.reply_text(plain_response)



async def listcountries_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /listcountries - muestra continentes para seleccionar pa√≠ses"""
    if not country_state_city:
        await update.message.reply_text(
            "‚ùå Servicio de pa√≠ses no disponible."
        )
        return

    # Mensaje de estado
    status_message = await update.message.reply_text(
        "üåç Cargando continentes disponibles..."
    )

    try:
        # Obtener pa√≠ses para verificar disponibilidad
        countries = country_state_city.get_available_countries()

        if not countries:
            await status_message.edit_text(
                "‚ùå No se pudieron obtener los pa√≠ses disponibles.\n"
                "Int√©ntalo de nuevo m√°s tarde."
            )
            return

        # Crear mensaje con botones de continentes
        message = (
            "üåç *Pa√≠ses disponibles por continente*\n\n"
            f"üìä Total de pa√≠ses: {len(countries)}\n\n"
            "Selecciona un continente para ver todos sus pa√≠ses:"
        )

        # Definir continentes con emojis
        continents = [
            ("üá™üá∫", "Europa", "europe"),
            ("üá∫üá∏", "Am√©rica del Norte", "north_america"),
            ("üáßüá∑", "Am√©rica del Sur", "south_america"),
            ("üá®üá≥", "Asia", "asia"),
            ("üá¶üá∫", "Ocean√≠a", "oceania"),
            ("üáøüá¶", "√Åfrica", "africa"),
            ("üåç", "Otros", "others")
        ]

        # Crear teclado con botones de continentes
        keyboard = []
        for emoji, name, code in continents:
            keyboard.append([InlineKeyboardButton(f"{emoji} {name}", callback_data=f"continent_{code}")])

        # Bot√≥n para ver todos los pa√≠ses de una vez
        keyboard.append([InlineKeyboardButton("üìã Ver todos los pa√≠ses", callback_data="continent_all")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await status_message.edit_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"Error en comando listcountries: {e}")
        await status_message.edit_text(
            "‚ùå Error al cargar continentes. Int√©ntalo de nuevo m√°s tarde."
        )


async def refreshcountries_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /refreshcountries - actualiza la base de datos de pa√≠ses (solo admins)"""
    if not country_state_city:
        await update.message.reply_text(
            "‚ùå Servicio de pa√≠ses no disponible."
        )
        return

    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    # Mensaje de estado
    status_message = await update.message.reply_text(
        "üîÑ Actualizando base de datos de pa√≠ses desde API...\n"
        "Esto puede tardar un momento..."
    )

    try:
        # Forzar actualizaci√≥n desde API
        countries = country_state_city.get_available_countries(force_refresh=True)

        if countries:
            await status_message.edit_text(
                f"‚úÖ Base de datos actualizada correctamente.\n"
                f"üìä {len(countries)} pa√≠ses disponibles.\n\n"
                f"Usa `/listcountries` para ver la lista actualizada."
            )
        else:
            await status_message.edit_text(
                "‚ùå No se pudieron actualizar los pa√≠ses.\n"
                "Verifica la conexi√≥n y la API key."
            )

    except Exception as e:
        logger.error(f"Error en comando refreshcountries: {e}")
        await status_message.edit_text(
            "‚ùå Error al actualizar pa√≠ses. Int√©ntalo de nuevo m√°s tarde."
        )



# ===========================
# COMANDOS DE CONFIGURACI√ìN
# ===========================

async def config_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /config - VERSI√ìN INTERACTIVA con botones"""
    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    # Mostrar configuraci√≥n con botones
    await show_config_menu(update, user)

async def show_config_menu(update, user: Dict, edit_message: bool = False):
    """Muestra el men√∫ principal de configuraci√≥n"""
    services = get_services()

    # Obtener configuraci√≥n de servicios
    user_services_config = user_services.get_user_services(user['id'])

    # Formatear mensaje de configuraci√≥n
    config_lines = [f"‚öôÔ∏è *Configuraci√≥n de {user['username']}*\n"]

    # Notificaciones
    notification_status = "‚úÖ Activadas" if user['notification_enabled'] else "‚ùå Desactivadas"
    config_lines.append(f"üîî *Notificaciones:* {notification_status}")
    config_lines.append(f"‚è∞ *Hora:* {user['notification_time']}")
    config_lines.append("")

    # Pa√≠ses configurados
    if services.get('country_state_city'):
        user_countries = services['country_state_city'].get_user_countries(user['id'])
        if user_countries:
            config_lines.append("üåç *Pa√≠ses configurados:*")
            countries_text = ", ".join([f"{c['name']} ({c['code']})" for c in user_countries[:3]])
            if len(user_countries) > 3:
                countries_text += f" y {len(user_countries) - 3} m√°s"
            config_lines.append(f"   {countries_text}")
        else:
            config_lines.append("üåç *Pa√≠ses:* Ninguno configurado")
    else:
        # Fallback al sistema legacy
        country_filter = user_services_config.get('country_filter', 'ES')
        config_lines.append(f"üåç *Pa√≠s:* {country_filter}")

    config_lines.append("")

    # Estado de servicios
    config_lines.append("üîß *Servicios de b√∫squeda:*")
    active_services = []
    inactive_services = []

    for service in ['ticketmaster', 'spotify', 'setlistfm']:
        if user_services_config.get(service, True):
            active_services.append(service.capitalize())
        else:
            inactive_services.append(service.capitalize())

    if active_services:
        config_lines.append(f"   ‚úÖ {', '.join(active_services)}")
    if inactive_services:
        config_lines.append(f"   ‚ùå {', '.join(inactive_services)}")

    # Artistas seguidos
    followed_artists = db.get_user_followed_artists(user['id'])
    config_lines.append("")
    config_lines.append(f"üéµ *Artistas seguidos:* {len(followed_artists)}")

    # Crear botones del men√∫ principal
    keyboard = [
        [
            InlineKeyboardButton("üîî Notificaciones", callback_data=f"config_notifications_{user['id']}"),
            InlineKeyboardButton("üåç Pa√≠ses", callback_data=f"config_countries_{user['id']}")
        ],
        [
            InlineKeyboardButton("üîß Servicios", callback_data=f"config_services_{user['id']}"),
            InlineKeyboardButton("üéµ Artistas", callback_data=f"config_artists_{user['id']}")
        ],
        [
            InlineKeyboardButton("üîÑ Actualizar", callback_data=f"config_refresh_{user['id']}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    response = "\n".join(config_lines)

    try:
        if edit_message and hasattr(update, 'callback_query'):
            await update.callback_query.edit_message_text(
                response,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                response,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
    except Exception as e:
        # Si hay error con Markdown, enviar sin formato
        logger.warning(f"Error con Markdown en config, enviando texto plano: {e}")
        plain_response = response.replace('*', '').replace('`', '')
        if edit_message and hasattr(update, 'callback_query'):
            await update.callback_query.edit_message_text(
                plain_response,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                plain_response,
                reply_markup=reply_markup
            )

# ===========================
# COMANDOS DE LAST.FM Y SPOTIFY
# ===========================

async def lastfm_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /lastfm - gesti√≥n de sincronizaci√≥n con Last.fm"""
    services = get_services()

    if not services.get('lastfm_service'):
        await update.message.reply_text(
            "‚ùå Servicio de Last.fm no disponible.\n"
            "Contacta al administrador para configurar la API key."
        )
        return

    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    # Verificar si ya tiene usuario de Last.fm configurado
    lastfm_user = db.get_user_lastfm(user['id'])

    if not lastfm_user:
        # No tiene usuario configurado, pedirlo
        context.user_data['waiting_for_lastfm_user'] = user['id']
        await show_lastfm_setup(update, user, context)
    else:
        # Ya tiene usuario, mostrar men√∫ principal
        await show_lastfm_menu(update, user, lastfm_user)

async def show_lastfm_setup(update, user: Dict, context = None):
    """Muestra el setup inicial de Last.fm"""
    message = (
        "üéµ *Configuraci√≥n de Last.fm*\n\n"
        "Para sincronizar tus artistas m√°s escuchados desde Last.fm, "
        "necesito tu nombre de usuario.\n\n"
        "Env√≠a tu nombre de usuario de Last.fm:"
    )

    keyboard = [[InlineKeyboardButton("‚ùå Cancelar", callback_data=f"lastfm_cancel_{user['id']}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        message,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def show_lastfm_menu(update, user: Dict, lastfm_user: Dict):
    """Muestra el men√∫ principal de Last.fm"""
    username = lastfm_user['lastfm_username']
    playcount = lastfm_user.get('lastfm_playcount', 0)
    sync_limit = lastfm_user.get('sync_limit', 20)

    message = (
        f"üéµ *Last.fm - {username}*\n\n"
        f"üìä Reproducciones: {playcount:,}\n"
        f"üî¢ L√≠mite de sincronizaci√≥n: {sync_limit} artistas\n\n"
        f"Selecciona el per√≠odo para sincronizar:"
    )

    keyboard = [
        [
            InlineKeyboardButton("üåü De siempre", callback_data=f"lastfm_period_overall_{user['id']}"),
            InlineKeyboardButton("üìÖ √öltimo a√±o", callback_data=f"lastfm_period_12month_{user['id']}")
        ],
        [
            InlineKeyboardButton("üìä √öltimo mes", callback_data=f"lastfm_period_1month_{user['id']}"),
            InlineKeyboardButton("‚ö° √öltima semana", callback_data=f"lastfm_period_7day_{user['id']}")
        ],
        [
            InlineKeyboardButton("üî¢ Cambiar cantidad", callback_data=f"lastfm_limit_{user['id']}"),
            InlineKeyboardButton("üë§ Cambiar usuario", callback_data=f"lastfm_changeuser_{user['id']}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        message,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )


# ===========================
# COMANDOS B√ÅSICOS
# ===========================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start y /help"""
    services = get_services()

    help_text = (
        "¬°Bienvenido al Bot de Seguimiento de Artistas! üéµ\n\n"

        "üìñ *Configuraci√≥n:*\n"
        "/config - Configurar tus preferencias\n"
        "/muspy - Panel de configuraci√≥n de Muspy\n"
        "/spotify - Configurar tus preferencias de Spotify\n"
        "/lastfm - Configurar tus preferencias de Last.fm\n\n"

        "üìù *Comandos b√°sicos*\n"
        "/addartist <artista> - Seguir un artista\n"
        "/search - Buscar nuevos conciertos de tus artistas (APIs)\n"
        "/show - Ver conciertos guardados de tus artistas (BD)\n\n"
    )

    help_text += (
        "‚ùì *Comandos directos:*\n"
        "/commands - Mostrar todos los comandos disponibles\n"
    )

    await update.message.reply_text(help_text, parse_mode='Markdown')

async def commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /start MODIFICADO con comandos actualizados"""
    services = get_services()

    help_text = (
        "¬°Bienvenido al Bot de Seguimiento de Artistas! üéµ\n\n"

        "üìñ *Configuraci√≥n:*\n"
        "/adduser <usuario> - Registrarte en el sistema\n"
        "/config - Configurar tus preferencias\n"
        "/muspy - Panel de configuraci√≥n de Muspy\n"
        "/spotify - Configurar tus preferencias de Spotify\n"
        "/lastfm - Configurar tus preferencias de Last.fm\n"
        "/notify [HH:MM] - Configurar notificaciones diarias\n"
        "/serviceon <servicio> - Activar servicio (ticketmaster/spotify/setlistfm)\n"
        "/serviceoff <servicio> - Desactivar servicio\n\n"

        "üìù *Comandos b√°sicos:*\n"
        "/adduser <usuario> - Registrarte en el sistema\n"
        "/addartist <artista> - Seguir un artista\n"
        "/list [usuario] - Ver artistas seguidos\n"
        "/remove <artista> - Dejar de seguir un artista\n\n"

        "üîç *Comandos de b√∫squeda:*\n"
        "/search - Buscar nuevos conciertos de tus artistas (APIs)\n"
        "/show - Ver conciertos guardados de tus artistas (BD)\n"
        "/searchartist <artista> - Buscar conciertos espec√≠ficos\n"
        "/showartist <artista> - Ver todos los conciertos de un artista\n\n"

    )

    if services.get('country_state_city'):
        help_text += (
            "üåç *Gesti√≥n de pa√≠ses:*\n"
            "/addcountry <pa√≠s> - A√±adir pa√≠s a tu configuraci√≥n\n"
            "/removecountry <c√≥digo> - Eliminar pa√≠s\n"
            "/mycountries - Ver tus pa√≠ses configurados\n"
            "/listcountries - Ver pa√≠ses disponibles\n\n"
        )
    else:
        help_text += (
            "üåç *Configuraci√≥n de pa√≠s:*\n"
            "/country <c√≥digo> - Establecer filtro de pa√≠s (ej: ES, US, FR)\n\n"
        )

    help_text += (
        "‚ùì *Ayuda:*\n"
        "/config - Ver tu configuraci√≥n actual\n"
        "/help - Mostrar este mensaje de ayuda\n\n"

        "üí° *Diferencia entre comandos:*\n"
        "‚Ä¢ `/search` = Busca nuevos conciertos en APIs (m√°s lento)\n"
        "‚Ä¢ `/show` = Consulta conciertos ya guardados (m√°s r√°pido)"
    )

    await update.message.reply_text(help_text, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /help"""
    await start(update, context)

async def commands_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /commands"""
    await commands(update, context)

async def adduser_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /adduser"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå Uso incorrecto. Debes especificar un nombre de usuario.\n"
            "Ejemplo: `/adduser tu_nombre`"
        )
        return

    username = context.args[0]
    chat_id = update.effective_chat.id

    # Validar nombre de usuario
    if len(username) < 2 or len(username) > 50:
        await update.message.reply_text(
            "‚ùå El nombre de usuario debe tener entre 2 y 50 caracteres."
        )
        return

    if db.add_user(username, chat_id):
        await update.message.reply_text(
            f"‚úÖ Usuario '{username}' registrado correctamente.\n"
            f"Ya puedes usar `/addartist` para seguir artistas."
        )
    else:
        await update.message.reply_text(
            "‚ùå Error al registrar el usuario. Int√©ntalo de nuevo."
        )

async def addartist_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /addartist mejorado con selecci√≥n m√∫ltiple"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå Uso incorrecto. Debes especificar el nombre del artista.\n"
            "Ejemplo: `/addartist Radiohead`"
        )
        return

    artist_name = " ".join(context.args)
    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    # Mensaje de estado
    status_message = await update.message.reply_text(
        f"üîç Buscando artistas que coincidan con '{artist_name}'..."
    )

    # Buscar candidatos
    candidates = db.search_artist_candidates(artist_name)

    if not candidates:
        await status_message.edit_text(
            f"‚ùå No se encontraron artistas que coincidan con '{artist_name}'.\n"
            f"Verifica la ortograf√≠a e int√©ntalo de nuevo."
        )
        return

    logger.info(f"Encontrados {len(candidates)} candidatos para '{artist_name}'")

    # Si solo hay un candidato, a√±adirlo directamente
    if len(candidates) == 1:
        artist_id = db.create_artist_from_candidate(candidates[0])

        if not artist_id:
            await status_message.edit_text(
                f"‚ùå Error al a√±adir el artista '{artist_name}'. Int√©ntalo de nuevo."
            )
            return

        was_new = db.add_followed_artist(user['id'], artist_id)

        if was_new:
            await status_message.edit_text(
                f"‚úÖ ¬°Ahora sigues a '{candidates[0]['name']}'! üéµ\n"
                f"Usa `/list` para ver todos tus artistas seguidos."
            )
        else:
            await status_message.edit_text(
                f"‚ÑπÔ∏è Ya segu√≠as a '{candidates[0]['name']}'."
            )
        return

    # M√∫ltiples candidatos: verificar si hay un candidato claramente mejor
    best_candidate = candidates[0]
    second_best = candidates[1] if len(candidates) > 1 else None

    # Si el mejor candidato tiene score muy alto y hay una diferencia significativa
    if (best_candidate['score'] >= 95 and
        (second_best is None or best_candidate['score'] - second_best['score'] >= 20)):

        artist_id = db.create_artist_from_candidate(best_candidate)

        if not artist_id:
            await status_message.edit_text(
                f"‚ùå Error al a√±adir el artista '{artist_name}'. Int√©ntalo de nuevo."
            )
            return

        was_new = db.add_followed_artist(user['id'], artist_id)

        if was_new:
            await status_message.edit_text(
                f"‚úÖ ¬°Ahora sigues a '{best_candidate['name']}'! üéµ\n"
                f"(Seleccionado autom√°ticamente por alta coincidencia: {best_candidate['score']}%)\n"
                f"Usa `/list` para ver todos tus artistas seguidos."
            )
        else:
            await status_message.edit_text(
                f"‚ÑπÔ∏è Ya segu√≠as a '{best_candidate['name']}'."
            )
        return

    # M√∫ltiples candidatos: mostrar opciones
    await show_artist_candidates(update, candidates, artist_name, status_message)

async def show_artist_candidates(update: Update, candidates: List[Dict], original_query: str, message_to_edit):
    """Muestra una lista de candidatos para que el usuario elija"""
    chat_id = update.effective_chat.id

    # Guardar candidatos para posterior selecci√≥n
    db.save_pending_selection(chat_id, candidates, original_query)

    # Crear mensaje con opciones
    message_lines = [f"üéµ *Encontr√© varios artistas para '{original_query}':*\n"]

    keyboard = []
    for i, candidate in enumerate(candidates[:8]):  # Limitar a 8 opciones
        # Formatear informaci√≥n del candidato
        info_parts = []
        if candidate.get('type'):
            info_parts.append(candidate['type'].title())
        if candidate.get('country'):
            info_parts.append(f"üåç {candidate['country']}")
        if candidate.get('formed_year'):
            info_parts.append(f"üìÖ {candidate['formed_year']}")
        if candidate.get('disambiguation'):
            info_parts.append(f"({candidate['disambiguation']})")

        info_text = " ‚Ä¢ ".join(info_parts) if info_parts else ""

        option_text = f"{i+1}. *{candidate['name']}*"
        if info_text:
            option_text += f"\n   _{info_text}_"

        message_lines.append(option_text)

        # Bot√≥n para esta opci√≥n
        button_text = f"{i+1}. {candidate['name']}"
        if len(button_text) > 30:
            button_text = button_text[:27] + "..."

        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"select_artist_{i}")])

    # Bot√≥n de cancelar
    keyboard.append([InlineKeyboardButton("‚ùå Cancelar", callback_data="cancel_artist_selection")])

    message_lines.append("\n*Selecciona el artista correcto:*")

    reply_markup = InlineKeyboardMarkup(keyboard)

    # Escapar caracteres especiales para Markdown
    response = "\n".join(message_lines)
    for char in ['_', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']:
        if char not in ['*', '_']:  # No escapar asteriscos y guiones bajos que usamos para formato
            response = response.replace(char, f'\\{char}')

    await message_to_edit.edit_text(
        response,
        parse_mode='MarkdownV2',
        reply_markup=reply_markup
    )

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /list mejorado con paginaci√≥n autom√°tica"""
    chat_id = update.effective_chat.id

    # Determinar qu√© usuario consultar
    if context.args:
        # Consultar otro usuario
        target_username = context.args[0]
        target_user = db.get_user_by_username(target_username)

        if not target_user:
            await update.message.reply_text(
                f"‚ùå Usuario '{target_username}' no encontrado."
            )
            return

        user_id = target_user['id']
        display_name = target_username
    else:
        # Consultar usuario actual
        current_user = db.get_user_by_chat_id(chat_id)
        if not current_user:
            await update.message.reply_text(
                "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
            )
            return

        user_id = current_user['id']
        display_name = "t√∫"

    # Obtener artistas seguidos
    followed_artists = db.get_user_followed_artists(user_id)

    if not followed_artists:
        pronoun = "no tienes" if display_name == "t√∫" else "no tiene"
        await update.message.reply_text(
            f"üì≠ {display_name.capitalize()} {pronoun} artistas seguidos a√∫n.\n"
            f"Usa `/addartist <nombre>` para empezar a seguir artistas."
        )
        return

    # Si hay 15 o menos artistas, mostrar sin paginaci√≥n (comportamiento original)
    if len(followed_artists) <= 15:
        response = await show_artists_without_pagination(update, followed_artists, display_name)
        try:
            await update.message.reply_text(
                response,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
        except Exception as e:
            # Si hay error con Markdown, enviar sin formato
            logger.warning(f"Error con Markdown en list, enviando texto plano: {e}")
            plain_response = response.replace('*', '').replace('`', '')
            await update.message.reply_text(plain_response)
    else:
        # Guardar datos para paginaci√≥n y mostrar primera p√°gina
        db.save_list_pagination_data(user_id, followed_artists, display_name)

        response, keyboard = await show_artists_page(update, user_id, followed_artists, display_name, page=0, edit_message=False)
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

        try:
            await update.message.reply_text(
                response,
                parse_mode='Markdown',
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )
        except Exception as e:
            # Si hay error con Markdown, enviar sin formato
            logger.warning(f"Error con Markdown en p√°gina de artistas: {e}")
            plain_response = response.replace('*', '').replace('`', '')
            await update.message.reply_text(plain_response, reply_markup=reply_markup)

async def remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /remove"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå Uso incorrecto. Debes especificar el nombre del artista.\n"
            "Ejemplo: `/remove Radiohead`"
        )
        return

    artist_name = " ".join(context.args)
    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    # Eliminar de la lista de seguimiento
    was_removed = db.remove_followed_artist(user['id'], artist_name)

    if was_removed:
        await update.message.reply_text(
            f"‚úÖ Has dejado de seguir a '{artist_name}'."
        )
    else:
        await update.message.reply_text(
            f"‚ùå No segu√≠as a '{artist_name}' o no se encontr√≥ el artista."
        )

async def notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /notify para configurar notificaciones"""
    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    if not context.args:
        # Mostrar configuraci√≥n actual
        status = "activadas" if user['notification_enabled'] else "desactivadas"
        await update.message.reply_text(
            f"üîî *Configuraci√≥n de notificaciones:*\n\n"
            f"Estado: {status}\n"
            f"Hora: {user['notification_time']}\n\n"
            f"*Uso:*\n"
            f"`/notify HH:MM` - Establecer hora (ej: /notify 09:00)\n"
            f"`/notify toggle` - Activar/desactivar\n"
            f"`/notify status` - Ver configuraci√≥n actual\n\n"
            f"*Nota:* Las notificaciones se env√≠an mediante un script separado.\n"
            f"Aseg√∫rate de ejecutar `python notification_scheduler.py` en segundo plano.",
            parse_mode='Markdown'
        )
        return

    command = context.args[0].lower()

    if command == "toggle":
        # Cambiar estado de notificaciones
        new_state = user_services.toggle_notifications(user['id'])
        status = "activadas" if new_state else "desactivadas"
        await update.message.reply_text(
            f"üîî Notificaciones {status}."
        )
    elif command == "status":
        # Mostrar estado actual
        status = "activadas" if user['notification_enabled'] else "desactivadas"
        await update.message.reply_text(
            f"üîî Notificaciones: {status}\n"
            f"‚è∞ Hora: {user['notification_time']}"
        )
    else:
        # Intentar establecer hora
        time_str = context.args[0]

        # Validar formato de hora
        try:
            datetime.strptime(time_str, '%H:%M')
        except ValueError:
            await update.message.reply_text(
                "‚ùå Formato de hora inv√°lido. Usa HH:MM (ej: 09:00)"
            )
            return

        # Establecer nueva hora
        if user_services.set_notification_time(user['id'], time_str):
            await update.message.reply_text(
                f"‚úÖ Hora de notificaci√≥n establecida a las {time_str}\n"
                f"üîî Las notificaciones est√°n {'activadas' if user['notification_enabled'] else 'desactivadas'}"
            )
        else:
            await update.message.reply_text(
                "‚ùå Error al establecer la hora de notificaci√≥n."
            )

# ===========================
# COMANDOS DE B√öSQUEDA
# ===========================

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /search - busca nuevos conciertos de artistas seguidos y los muestra organizadamente"""
    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    # Obtener configuraci√≥n del usuario
    user_services_config = user_services.get_user_services(user['id'])

    # Manejar caso donde user_services puede ser None
    if not user_services_config:
        user_services_config = {
            'countries': {'ES'},
            'country_filter': 'ES'
        }

    # Verificar que tenga pa√≠ses configurados
    user_countries = user_services_config.get('countries', set())
    if not user_countries:
        # Usar pa√≠s por defecto si no tiene configurado
        country_filter = user_services_config.get('country_filter', 'ES')
        user_countries = {country_filter}

    # Verificar que tenga al menos un servicio activo
    active_services = [s for s, active in user_services_config.items() if active and s not in ['country_filter', 'countries']]
    if not active_services:
        await update.message.reply_text(
            "‚ùå No tienes ning√∫n servicio de b√∫squeda activo.\n"
            "Usa `/serviceon <servicio>` para activar al menos uno.\n"
            "Servicios disponibles: ticketmaster, spotify, setlistfm"
        )
        return

    # Obtener artistas seguidos
    followed_artists = db.get_user_followed_artists(user['id'])

    if not followed_artists:
        await update.message.reply_text(
            "üì≠ No tienes artistas seguidos a√∫n.\n"
            "Usa `/addartist <nombre>` para seguir artistas.\n"
            "Usa `/show` para ver conciertos ya guardados en base de datos."
        )
        return

    # Mensaje de estado inicial
    countries_text = ", ".join(sorted(user_countries))
    services_text = ", ".join(active_services)

    status_message = await update.message.reply_text(
        f"üîç Buscando nuevos conciertos de tus artistas seguidos...\n"
        f"üéµ Artistas a procesar: {len(followed_artists)}\n"
        f"üîß Servicios activos: {services_text}\n"
        f"üåç Pa√≠ses: {countries_text}\n\n"
        f"‚è≥ Iniciando b√∫squeda activa..."
    )

    try:
        all_found_concerts = []
        processed_artists = 0
        total_artists = len(followed_artists)
        services = get_services()

        # Buscar conciertos para cada artista seguido
        for artist in followed_artists:
            artist_name = artist['name']
            processed_artists += 1

            # Actualizar progreso cada 3 artistas
            if processed_artists % 3 == 0 or processed_artists == total_artists:
                await status_message.edit_text(
                    f"üîç Buscando nuevos conciertos...\n"
                    f"üìä Progreso: {processed_artists}/{total_artists} artistas\n"
                    f"üéµ Actual: {artist_name}\n"
                    f"üîß Servicios: {services_text}\n"
                    f"üåç Pa√≠ses: {countries_text}"
                )

            try:
                # Buscar conciertos para este artista
                # search_concerts_for_artist YA guarda los conciertos y retorna TODOS los encontrados
                artist_concerts = await search_concerts_for_artist(
                    artist_name,
                    user_services_config,
                    user_id=user['id'],
                    services=services,
                    database=db
                )

                # A√±adir a la lista total (sin filtrar a√∫n)
                all_found_concerts.extend(artist_concerts)

                # Pausa para no sobrecargar las APIs
                await asyncio.sleep(1.5)

            except Exception as e:
                logger.error(f"Error buscando conciertos para {artist_name}: {e}")
                continue

        # Ahora S√ç filtrar los conciertos por pa√≠ses y fechas futuras
        await status_message.edit_text(
            f"‚úÖ B√∫squeda completada!\n"
            f"üéµ {len(all_found_concerts)} conciertos encontrados en total\n"
            f"üåç Filtrando por pa√≠ses: {countries_text}\n"
            f"üìÖ Filtrando solo conciertos futuros..."
        )

        # Filtrar por pa√≠ses y fechas futuras
        filtered_concerts = filter_future_concerts_by_countries(
            all_found_concerts,
            user_countries,
            database_path=db.db_path
        )

        # Procesar y enviar resultados
        await process_and_send_concert_results(
            update, status_message, filtered_concerts, processed_artists, countries_text, services_text, is_search=True
        )

    except Exception as e:
        logger.error(f"Error en comando search: {e}")
        await status_message.edit_text(
            f"‚ùå Error al buscar conciertos. Int√©ntalo de nuevo m√°s tarde.\n"
            f"Error: {str(e)[:100]}..."
        )

async def show_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /show - muestra conciertos futuros de artistas seguidos desde la base de datos"""
    chat_id = update.effective_chat.id

    # Verificar que el usuario est√© registrado
    user = db.get_user_by_chat_id(chat_id)
    if not user:
        await update.message.reply_text(
            "‚ùå Primero debes registrarte con `/adduser <tu_nombre>`"
        )
        return

    # Obtener configuraci√≥n del usuario
    user_services_config = user_services.get_user_services(user['id'])

    # Manejar caso donde user_services puede ser None
    if not user_services_config:
        user_services_config = {
            'countries': {'ES'},
            'country_filter': 'ES'
        }

    # Verificar que tenga pa√≠ses configurados
    user_countries = user_services_config.get('countries', set())
    if not user_countries:
        # Usar pa√≠s por defecto si no tiene configurado
        country_filter = user_services_config.get('country_filter', 'ES')
        user_countries = {country_filter}

    # Mensaje de estado inicial
    countries_text = ", ".join(sorted(user_countries))
    status_message = await update.message.reply_text(
        f"üìä Consultando conciertos de tus artistas seguidos...\n"
        f"üåç Pa√≠ses configurados: {countries_text}\n"
        f"üìÇ Consultando base de datos..."
    )

    try:
        # Obtener artistas seguidos
        followed_artists = db.get_user_followed_artists(user['id'])

        if not followed_artists:
            await status_message.edit_text(
                "üì≠ No tienes artistas seguidos a√∫n.\n"
                "Usa `/addartist <nombre>` para seguir artistas.\n"
                "Usa `/search` para buscar nuevos conciertos de tus artistas."
            )
            return

        # Obtener TODOS los conciertos de los artistas seguidos desde la base de datos
        conn = db.get_connection()
        cursor = conn.cursor()

        artist_names = [artist['name'] for artist in followed_artists]
        placeholders = ','.join(['?' for _ in artist_names])

        cursor.execute(f"""
            SELECT DISTINCT c.*
            FROM concerts c
            WHERE LOWER(c.artist_name) IN ({','.join(['LOWER(?)' for _ in artist_names])})
            ORDER BY c.date ASC
        """, artist_names)

        rows = cursor.fetchall()
        all_concerts = [dict(row) for row in rows]
        conn.close()

        await status_message.edit_text(
            f"üìä Encontrados {len(all_concerts)} conciertos en base de datos\n"
            f"üåç Filtrando por pa√≠ses: {countries_text}\n"
            f"üìÖ Filtrando solo conciertos futuros..."
        )

        # Filtrar solo conciertos futuros y por pa√≠ses
        future_concerts = filter_future_concerts_by_countries(all_concerts, user_countries)

        # Procesar y enviar resultados
        await process_and_send_concert_results(
            update, status_message, future_concerts, len(followed_artists), countries_text, "Base de datos", is_search=False
        )

    except Exception as e:
        logger.error(f"Error en comando show: {e}")
        await status_message.edit_text(
            f"‚ùå Error al consultar conciertos. Int√©ntalo de nuevo m√°s tarde.\n"
            f"Error: {str(e)[:100]}..."
        )


async def process_and_send_concert_results(update, status_message, concerts, processed_count, countries_text, source_text, is_search=True):
    """Procesa y env√≠a los resultados de conciertos de manera consistente"""
    # Filtrar solo conciertos futuros
    today = datetime.now().date()
    future_concerts = []

    for concert in concerts:
        concert_date = concert.get('date', '')
        if concert_date and len(concert_date) >= 10:
            try:
                concert_date_obj = datetime.strptime(concert_date[:10], '%Y-%m-%d').date()
                if concert_date_obj >= today:
                    future_concerts.append(concert)
            except ValueError:
                future_concerts.append(concert)  # Incluir si no se puede parsear
        else:
            future_concerts.append(concert)  # Incluir si no hay fecha

    # Agrupar conciertos por artista
    concerts_by_artist = {}
    for concert in future_concerts:
        artist_name = concert.get('artist_name', 'Artista desconocido')
        if artist_name not in concerts_by_artist:
            concerts_by_artist[artist_name] = []
        concerts_by_artist[artist_name].append(concert)

    # Actualizar mensaje de estado
    await status_message.edit_text(
        f"‚úÖ Procesamiento completado!\n"
        f"üéµ {len(concerts_by_artist)} artistas con conciertos futuros\n"
        f"üìÖ {len(future_concerts)} conciertos pr√≥ximos\n"
        f"üåç {countries_text}\n\n"
        f"üì§ Enviando resultados..."
    )

    # Enviar un mensaje por cada artista con conciertos futuros
    artists_with_concerts = 0
    messages_sent = 0

    for artist_name, artist_concerts in concerts_by_artist.items():
        if artist_concerts:  # Solo enviar si tiene conciertos futuros
            # Formatear mensaje del artista
            message = format_single_artist_concerts_complete(
                artist_concerts,
                artist_name,
                show_notified=not is_search  # Solo mostrar notificaciones en /show
            )

            # Dividir en chunks si es muy largo
            if len(message) > 4000:
                chunks = split_long_message(message, max_length=4000)
                for i, chunk in enumerate(chunks):
                    await update.message.reply_text(
                        chunk,
                        parse_mode='Markdown',
                        disable_web_page_preview=True
                    )
                    messages_sent += 1
                    # Pausa entre chunks del mismo artista
                    if i < len(chunks) - 1:
                        await asyncio.sleep(0.5)
            else:
                await update.message.reply_text(
                    message,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )
                messages_sent += 1

            artists_with_concerts += 1

            # Pausa entre mensajes de diferentes artistas
            await asyncio.sleep(1.0)

    # Mensaje final de resumen
    action_text = "b√∫squeda activa" if is_search else "consulta"
    if artists_with_concerts == 0:
        suggestion_text = get_no_concerts_suggestions(is_search, countries_text)

        await update.message.reply_text(
            f"üì≠ No se encontraron conciertos futuros en tus pa√≠ses configurados ({countries_text}).\n\n"
            f"üìä Estad√≠sticas de {action_text}:\n"
            f"‚Ä¢ Artistas procesados: {processed_count}\n"
            f"‚Ä¢ Conciertos encontrados: {len(concerts)}\n"
            f"‚Ä¢ Conciertos futuros: {len(future_concerts)}\n"
            f"‚Ä¢ Fuente: {source_text}\n\n"
            f"{suggestion_text}"
        )
    else:
        summary_message = (
            f"üéâ *Resultados de {action_text}*\n\n"
            f"üìä Artistas con conciertos futuros: {artists_with_concerts}\n"
            f"üìÖ Total de conciertos pr√≥ximos: {len(future_concerts)}\n"
            f"üì§ Mensajes enviados: {messages_sent}\n"
            f"üîß Fuente: {source_text}\n"
            f"üåç Pa√≠ses consultados: {countries_text}\n\n"
            f"üí° Comandos √∫tiles:\n"
            f"‚Ä¢ `/search` - Buscar nuevos conciertos\n" if not is_search else "‚Ä¢ `/show` - Ver conciertos guardados\n"
            f"‚Ä¢ `/showartist <nombre>` - Ver todos los conciertos de un artista\n"
            f"‚Ä¢ `/addcountry <pa√≠s>` - A√±adir m√°s pa√≠ses"
        )
        await update.message.reply_text(
            summary_message,
            parse_mode='Markdown'
        )

    # Actualizar mensaje de estado final
    await status_message.edit_text(
        f"‚úÖ {action_text.capitalize()} completada\n"
        f"üéµ {artists_with_concerts} artistas con conciertos\n"
        f"üìÖ {len(future_concerts)} conciertos futuros\n"
        f"üì§ {messages_sent} mensajes enviados"
    )


# ===========================
# MUSPY
# ===========================

async def muspy_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja todos los callbacks de Muspy - VERSI√ìN INTEGRADA"""
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    logger.info(f"Muspy callback recibido: {callback_data}")

    # Parsear callback data
    parts = callback_data.split("_")
    if len(parts) < 3 or parts[0] != "muspy":
        await query.edit_message_text("‚ùå Callback no v√°lido.")
        return

    action = parts[1]

    # Obtener user_id del final
    try:
        user_id = int(parts[-1])
    except (ValueError, IndexError):
        await query.edit_message_text("‚ùå Error de usuario.")
        return

    # Verificar que el usuario existe
    user = db.get_user_by_chat_id(query.message.chat_id)
    if not user or user['id'] != user_id:
        await query.edit_message_text("‚ùå Error de autenticaci√≥n.")
        return

    try:
        if action == "menu":
            # Volver al men√∫ principal de Muspy
            fake_update = type('obj', (object,), {
                'message': query.message,
                'callback_query': query,
                'effective_chat': query.message.chat
            })()
            await muspy_handlers.muspy_command(fake_update, context)

        elif action == "artists" and len(parts) > 2 and parts[2] == "page":
            # Manejar paginaci√≥n de artistas
            page = int(parts[3]) if len(parts) > 3 else 0

            if user_id in muspy_handlers.user_artists_cache:
                artists = muspy_handlers.user_artists_cache[user_id]
                await muspy_handlers._show_artists_page(query, user_id, artists, page)
            else:
                await query.edit_message_text("‚ùå Lista de artistas expirada. Usa `/muspy` de nuevo.")

        elif action == "current" and parts[1] == "current" and parts[2] == "page":
            # No hacer nada si presiona el bot√≥n de p√°gina actual
            return

        else:
            # Delegar al handler principal de Muspy
            await muspy_handlers.muspy_callback_handler(update, context)

    except Exception as e:
        logger.error(f"Error en muspy_callback_handler: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        await query.edit_message_text("‚ùå Error procesando la solicitud.")



# ===========================
# CALENDARIO
# ===========================

async def calendar_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja todos los callbacks de calendario"""
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    logger.info(f"Calendar callback recibido: {callback_data}")

    # Parsear callback data
    parts = callback_data.split("_")
    if len(parts) != 3 or parts[0] != "cal":
        await query.edit_message_text("‚ùå Callback no v√°lido.")
        return

    action = parts[1]
    user_id = int(parts[2])

    # Verificar que el usuario existe
    user = db.get_user_by_chat_id(query.message.chat_id)
    if not user or user['id'] != user_id:
        await query.edit_message_text("‚ùå Error de autenticaci√≥n.")
        return

    try:
        # Delegar al handler principal de calendario
        await calendar_handlers.cal_callback_handler(update, context)

    except Exception as e:
        logger.error(f"Error en calendar_callback_handler: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        await query.edit_message_text("‚ùå Error procesando la solicitud.")



# ===========================
# FUNCI√ìN PRINCIPAL
# ===========================

def main():
    """Funci√≥n principal MODIFICADA para usar m√≥dulos separados"""
    global db, user_services, application, muspy_service, muspy_handlers


    # Configuraci√≥n
    TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_CONCIERTOS')
    DB_PATH = os.getenv('DB_PATH', 'artist_tracker.db')
    CACHE_DIR = os.getenv('CACHE_DIR', './cache')

    if not TELEGRAM_TOKEN:
        logger.error("‚ùå No se ha configurado TELEGRAM_BOT_CONCIERTOS en las variables de entorno")
        return

    # Inicializar base de datos
    db = ArtistTrackerDatabase(DB_PATH)

    db.init_muspy_tables()


    # Inicializar servicios de usuario
    user_services = UserServices(db)

    # Inicializar servicios de conciertos
    initialize_concert_services()

    # Inicializar servicio de pa√≠ses
    initialize_country_service(DB_PATH)

    # Obtener referencia al servicio inicializado
    services = get_services()
    global country_state_city
    country_state_city = services.get('country_state_city')

    # Inicializar servicio de Last.fm
    initialize_lastfm_service()

    # Configurar MusicBrainz si est√° disponible
    user_agent = {
        "app": "MusicLiveShowsTrackerBot",
        "version": "0.1",
        "contact": "frodobolson+server@disroot.org"
    }

    try:
        from apis.mb_artist_info import setup_musicbrainz
        setup_musicbrainz(user_agent=user_agent, cache_directory=CACHE_DIR)
        logger.info("MusicBrainz configurado correctamente")
    except Exception as e:
        logger.warning(f"MusicBrainz no disponible: {e}")

    # Inicializar servicio de Muspy
    muspy_service = MuspyService()
    muspy_handlers = MuspyHandlers(db, muspy_service)

    # Inicializar handlers de calendario
    global calendar_handlers
    calendar_handlers = CalendarHandlers(db, muspy_service)

    # Validar servicios
    validate_services()

    # Crear la aplicaci√≥n y agregar handlers
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # ConversationHandler para el login de Muspy
    muspy_login_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(
            muspy_handlers._start_muspy_login,
            pattern="^muspy_login_"
        )],
        states={
            MUSPY_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, muspy_handlers.login_email_handler)],
            MUSPY_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, muspy_handlers.login_password_handler)],
            MUSPY_USERID: [MessageHandler(filters.TEXT & ~filters.COMMAND, muspy_handlers.login_userid_handler)],
        },
        fallbacks=[CommandHandler('cancel', muspy_handlers.cancel_login)],
        per_chat=True,
        per_user=True
    )

    # Handlers de comandos b√°sicos
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("commands", commands_command))
    application.add_handler(CommandHandler("adduser", adduser_command))
    application.add_handler(CommandHandler("addartist", addartist_command))
    application.add_handler(CommandHandler("list", list_command))
    application.add_handler(CommandHandler("remove", remove_command))
    application.add_handler(CommandHandler("notify", notify_command))
    application.add_handler(CommandHandler("playlist", playlist_command))

    # Handler de comando calendario
    application.add_handler(CommandHandler("cal", calendar_handlers.cal_command))

    # Handlers de b√∫squeda
    application.add_handler(CommandHandler("search", search_command))
    application.add_handler(CommandHandler("show", show_command))
    application.add_handler(CommandHandler("searchartist", searchartist_command))
    application.add_handler(CommandHandler("showartist", showartist_command))

    # Handlers de servicios
    application.add_handler(CommandHandler("serviceon", serviceon_command))
    application.add_handler(CommandHandler("serviceoff", serviceoff_command))

    # Handlers de pa√≠ses
    application.add_handler(CommandHandler("country", country_command))
    application.add_handler(CommandHandler("addcountry", addcountry_command))
    application.add_handler(CommandHandler("removecountry", removecountry_command))
    application.add_handler(CommandHandler("mycountries", mycountries_command))
    application.add_handler(CommandHandler("listcountries", listcountries_command))
    application.add_handler(CommandHandler("refreshcountries", refreshcountries_command))

    # Handler de configuraci√≥n
    application.add_handler(CommandHandler("config", config_command))

    # Handlers de Last.fm y Spotify y Muspy
    application.add_handler(CommandHandler("lastfm", lastfm_command))
    application.add_handler(CommandHandler("spotify", spotify_command))

    # ConversationHandler para login de Muspy
    application.add_handler(muspy_login_conv_handler)

    # Handler de comando Muspy
    application.add_handler(CommandHandler("muspy", muspy_handlers.muspy_command))

    application.add_handler(CallbackQueryHandler(muspy_callback_handler, pattern="^muspy_"))


    # Callbacks espec√≠ficos de pa√≠ses
    application.add_handler(CallbackQueryHandler(country_selection_callback, pattern="^(select_country_|cancel_country_selection)"))
    application.add_handler(CallbackQueryHandler(continent_selection_callback, pattern="^continent_"))
    application.add_handler(CallbackQueryHandler(back_to_continents_callback, pattern="^back_to_continents"))


    # Handlers de callbacks espec√≠ficos (ORDEN IMPORTANTE)
    application.add_handler(CallbackQueryHandler(artist_selection_callback, pattern="^(select_artist_|cancel_artist_selection)"))
    application.add_handler(CallbackQueryHandler(list_page_callback, pattern="^list_page_"))
    application.add_handler(CallbackQueryHandler(lastfm_callback_handler, pattern="^lastfm_"))
    application.add_handler(CallbackQueryHandler(spotify_callback_handler, pattern="^spotify_"))


    # Callbacks de calendario (DESPU√âS de muspy_callback_handler)
    application.add_handler(CallbackQueryHandler(calendar_callback_handler, pattern="^cal_"))


    # Callback para p√°gina actual (no hace nada, solo evita errores)
    application.add_handler(CallbackQueryHandler(
        lambda update, context: update.callback_query.answer(),
        pattern="^(current_list_page|current_lastfm_page|current_spotify_page)$"
    ))

    # Handler gen√©rico de configuraci√≥n (DEBE IR AL FINAL de los callbacks)
    application.add_handler(CallbackQueryHandler(config_callback_handler, pattern="^(config_|notif_|country_|service_|artist_)"))

    # Handler de texto (DEBE SER EL √öLTIMO)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input))

    # Iniciar el bot
    services = get_services()
    logger.info("ü§ñ Bot de seguimiento de artistas iniciado con arquitectura modular.")
    if services.get('country_state_city'):
        logger.info("‚úÖ Sistema de pa√≠ses m√∫ltiples activado")
    else:
        logger.info("‚ö†Ô∏è Sistema de pa√≠ses m√∫ltiples no disponible (falta API key)")

    logger.info("üîî Para notificaciones, ejecuta: python notification_scheduler.py")
    logger.info("Presiona Ctrl+C para detenerlo.")

    try:
        application.run_polling()
    except KeyboardInterrupt:
        logger.info("üõë Bot detenido por el usuario")
    except Exception as e:
        logger.error(f"‚ùå Error cr√≠tico en el bot: {e}")

if __name__ == "__main__":
    main()
